// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcg_gcmessages_common.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EGCDCGCommonMessages int32

const (
	EGCDCGCommonMessages_k_EMsgAnyToGCReportAsserts         EGCDCGCommonMessages = 7000
	EGCDCGCommonMessages_k_EMsgAnyToGCReportAssertsResponse EGCDCGCommonMessages = 7001
)

var EGCDCGCommonMessages_name = map[int32]string{
	7000: "k_EMsgAnyToGCReportAsserts",
	7001: "k_EMsgAnyToGCReportAssertsResponse",
}
var EGCDCGCommonMessages_value = map[string]int32{
	"k_EMsgAnyToGCReportAsserts":         7000,
	"k_EMsgAnyToGCReportAssertsResponse": 7001,
}

func (x EGCDCGCommonMessages) Enum() *EGCDCGCommonMessages {
	p := new(EGCDCGCommonMessages)
	*p = x
	return p
}
func (x EGCDCGCommonMessages) String() string {
	return proto.EnumName(EGCDCGCommonMessages_name, int32(x))
}
func (x *EGCDCGCommonMessages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EGCDCGCommonMessages_value, data, "EGCDCGCommonMessages")
	if err != nil {
		return err
	}
	*x = EGCDCGCommonMessages(value)
	return nil
}
func (EGCDCGCommonMessages) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{0}
}

type EDCGMatchMode int32

const (
	EDCGMatchMode_k_EDCGMatchMode_NewUser      EDCGMatchMode = 1
	EDCGMatchMode_k_EDCGMatchMode_Unranked     EDCGMatchMode = 2
	EDCGMatchMode_k_EDCGMatchMode_Gauntlet     EDCGMatchMode = 3
	EDCGMatchMode_k_EDCGMatchMode_League       EDCGMatchMode = 4
	EDCGMatchMode_k_EDCGMatchMode_Draft        EDCGMatchMode = 5
	EDCGMatchMode_k_EDCGMatchMode_PrivateLobby EDCGMatchMode = 6
	EDCGMatchMode_k_EDCGMatchMode_Puzzle       EDCGMatchMode = 7
	EDCGMatchMode_k_EDCGMatchMode_AI           EDCGMatchMode = 8
	EDCGMatchMode_k_EDCGMatchMode_Tournament   EDCGMatchMode = 9
)

var EDCGMatchMode_name = map[int32]string{
	1: "k_EDCGMatchMode_NewUser",
	2: "k_EDCGMatchMode_Unranked",
	3: "k_EDCGMatchMode_Gauntlet",
	4: "k_EDCGMatchMode_League",
	5: "k_EDCGMatchMode_Draft",
	6: "k_EDCGMatchMode_PrivateLobby",
	7: "k_EDCGMatchMode_Puzzle",
	8: "k_EDCGMatchMode_AI",
	9: "k_EDCGMatchMode_Tournament",
}
var EDCGMatchMode_value = map[string]int32{
	"k_EDCGMatchMode_NewUser":      1,
	"k_EDCGMatchMode_Unranked":     2,
	"k_EDCGMatchMode_Gauntlet":     3,
	"k_EDCGMatchMode_League":       4,
	"k_EDCGMatchMode_Draft":        5,
	"k_EDCGMatchMode_PrivateLobby": 6,
	"k_EDCGMatchMode_Puzzle":       7,
	"k_EDCGMatchMode_AI":           8,
	"k_EDCGMatchMode_Tournament":   9,
}

func (x EDCGMatchMode) Enum() *EDCGMatchMode {
	p := new(EDCGMatchMode)
	*p = x
	return p
}
func (x EDCGMatchMode) String() string {
	return proto.EnumName(EDCGMatchMode_name, int32(x))
}
func (x *EDCGMatchMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDCGMatchMode_value, data, "EDCGMatchMode")
	if err != nil {
		return err
	}
	*x = EDCGMatchMode(value)
	return nil
}
func (EDCGMatchMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{1}
}

type EDCGLobbyTeam int32

const (
	EDCGLobbyTeam_k_EDCGLobbyTeam_Team0     EDCGLobbyTeam = 0
	EDCGLobbyTeam_k_EDCGLobbyTeam_Team1     EDCGLobbyTeam = 1
	EDCGLobbyTeam_k_EDCGLobbyTeam_Spectator EDCGLobbyTeam = 16
)

var EDCGLobbyTeam_name = map[int32]string{
	0:  "k_EDCGLobbyTeam_Team0",
	1:  "k_EDCGLobbyTeam_Team1",
	16: "k_EDCGLobbyTeam_Spectator",
}
var EDCGLobbyTeam_value = map[string]int32{
	"k_EDCGLobbyTeam_Team0":     0,
	"k_EDCGLobbyTeam_Team1":     1,
	"k_EDCGLobbyTeam_Spectator": 16,
}

func (x EDCGLobbyTeam) Enum() *EDCGLobbyTeam {
	p := new(EDCGLobbyTeam)
	*p = x
	return p
}
func (x EDCGLobbyTeam) String() string {
	return proto.EnumName(EDCGLobbyTeam_name, int32(x))
}
func (x *EDCGLobbyTeam) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDCGLobbyTeam_value, data, "EDCGLobbyTeam")
	if err != nil {
		return err
	}
	*x = EDCGLobbyTeam(value)
	return nil
}
func (EDCGLobbyTeam) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{2}
}

type EDCGLobbyTimer int32

const (
	EDCGLobbyTimer_k_eDCGLobbyTimer_Unspecified EDCGLobbyTimer = 0
	EDCGLobbyTimer_k_eDCGLobbyTimer_Disabled    EDCGLobbyTimer = 1
	EDCGLobbyTimer_k_eDCGLobbyTimer_Default     EDCGLobbyTimer = 2
	EDCGLobbyTimer_k_eDCGLobbyTimer_Tournament  EDCGLobbyTimer = 3
)

var EDCGLobbyTimer_name = map[int32]string{
	0: "k_eDCGLobbyTimer_Unspecified",
	1: "k_eDCGLobbyTimer_Disabled",
	2: "k_eDCGLobbyTimer_Default",
	3: "k_eDCGLobbyTimer_Tournament",
}
var EDCGLobbyTimer_value = map[string]int32{
	"k_eDCGLobbyTimer_Unspecified": 0,
	"k_eDCGLobbyTimer_Disabled":    1,
	"k_eDCGLobbyTimer_Default":     2,
	"k_eDCGLobbyTimer_Tournament":  3,
}

func (x EDCGLobbyTimer) Enum() *EDCGLobbyTimer {
	p := new(EDCGLobbyTimer)
	*p = x
	return p
}
func (x EDCGLobbyTimer) String() string {
	return proto.EnumName(EDCGLobbyTimer_name, int32(x))
}
func (x *EDCGLobbyTimer) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDCGLobbyTimer_value, data, "EDCGLobbyTimer")
	if err != nil {
		return err
	}
	*x = EDCGLobbyTimer(value)
	return nil
}
func (EDCGLobbyTimer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{3}
}

type EDCGPrivateLobbyMode int32

const (
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Standard EDCGPrivateLobbyMode = 0
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Random1  EDCGPrivateLobbyMode = 1
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Random2  EDCGPrivateLobbyMode = 2
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Random3  EDCGPrivateLobbyMode = 3
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Random4  EDCGPrivateLobbyMode = 4
	EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Chaos    EDCGPrivateLobbyMode = 5
)

var EDCGPrivateLobbyMode_name = map[int32]string{
	0: "k_eDCGPrivateLobbyMode_Standard",
	1: "k_eDCGPrivateLobbyMode_Random1",
	2: "k_eDCGPrivateLobbyMode_Random2",
	3: "k_eDCGPrivateLobbyMode_Random3",
	4: "k_eDCGPrivateLobbyMode_Random4",
	5: "k_eDCGPrivateLobbyMode_Chaos",
}
var EDCGPrivateLobbyMode_value = map[string]int32{
	"k_eDCGPrivateLobbyMode_Standard": 0,
	"k_eDCGPrivateLobbyMode_Random1":  1,
	"k_eDCGPrivateLobbyMode_Random2":  2,
	"k_eDCGPrivateLobbyMode_Random3":  3,
	"k_eDCGPrivateLobbyMode_Random4":  4,
	"k_eDCGPrivateLobbyMode_Chaos":    5,
}

func (x EDCGPrivateLobbyMode) Enum() *EDCGPrivateLobbyMode {
	p := new(EDCGPrivateLobbyMode)
	*p = x
	return p
}
func (x EDCGPrivateLobbyMode) String() string {
	return proto.EnumName(EDCGPrivateLobbyMode_name, int32(x))
}
func (x *EDCGPrivateLobbyMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDCGPrivateLobbyMode_value, data, "EDCGPrivateLobbyMode")
	if err != nil {
		return err
	}
	*x = EDCGPrivateLobbyMode(value)
	return nil
}
func (EDCGPrivateLobbyMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{4}
}

type ELobbyServerState int32

const (
	ELobbyServerState_k_eLobbyServerState_Assign    ELobbyServerState = 0
	ELobbyServerState_k_eLobbyServerState_InGame    ELobbyServerState = 1
	ELobbyServerState_k_eLobbyServerState_PostMatch ELobbyServerState = 2
	ELobbyServerState_k_eLobbyServerState_SignedOut ELobbyServerState = 3
	ELobbyServerState_k_eLobbyServerState_Abandoned ELobbyServerState = 4
)

var ELobbyServerState_name = map[int32]string{
	0: "k_eLobbyServerState_Assign",
	1: "k_eLobbyServerState_InGame",
	2: "k_eLobbyServerState_PostMatch",
	3: "k_eLobbyServerState_SignedOut",
	4: "k_eLobbyServerState_Abandoned",
}
var ELobbyServerState_value = map[string]int32{
	"k_eLobbyServerState_Assign":    0,
	"k_eLobbyServerState_InGame":    1,
	"k_eLobbyServerState_PostMatch": 2,
	"k_eLobbyServerState_SignedOut": 3,
	"k_eLobbyServerState_Abandoned": 4,
}

func (x ELobbyServerState) Enum() *ELobbyServerState {
	p := new(ELobbyServerState)
	*p = x
	return p
}
func (x ELobbyServerState) String() string {
	return proto.EnumName(ELobbyServerState_name, int32(x))
}
func (x *ELobbyServerState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELobbyServerState_value, data, "ELobbyServerState")
	if err != nil {
		return err
	}
	*x = ELobbyServerState(value)
	return nil
}
func (ELobbyServerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{5}
}

type EGCLobbyData int32

const (
	EGCLobbyData_k_ELobbyData_PostMatchSurvey EGCLobbyData = 1
)

var EGCLobbyData_name = map[int32]string{
	1: "k_ELobbyData_PostMatchSurvey",
}
var EGCLobbyData_value = map[string]int32{
	"k_ELobbyData_PostMatchSurvey": 1,
}

func (x EGCLobbyData) Enum() *EGCLobbyData {
	p := new(EGCLobbyData)
	*p = x
	return p
}
func (x EGCLobbyData) String() string {
	return proto.EnumName(EGCLobbyData_name, int32(x))
}
func (x *EGCLobbyData) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EGCLobbyData_value, data, "EGCLobbyData")
	if err != nil {
		return err
	}
	*x = EGCLobbyData(value)
	return nil
}
func (EGCLobbyData) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{6}
}

type DCG_COMBATLOG_TYPES int32

const (
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_INVALID                       DCG_COMBATLOG_TYPES = -1
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DAMAGE                        DCG_COMBATLOG_TYPES = 0
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_HEAL                          DCG_COMBATLOG_TYPES = 1
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DRAW                          DCG_COMBATLOG_TYPES = 2
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PASS                          DCG_COMBATLOG_TYPES = 3
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_COMBAT                        DCG_COMBATLOG_TYPES = 4
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_CREEP                    DCG_COMBATLOG_TYPES = 5
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_IMPROVEMENT              DCG_COMBATLOG_TYPES = 6
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_SPELL                    DCG_COMBATLOG_TYPES = 7
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_EQUIPMENT                DCG_COMBATLOG_TYPES = 8
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_ABILITY                  DCG_COMBATLOG_TYPES = 9
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_GAIN_GOLD                     DCG_COMBATLOG_TYPES = 10
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BUY_ITEM                      DCG_COMBATLOG_TYPES = 11
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DISCARD                       DCG_COMBATLOG_TYPES = 12
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_ADD_MODIFIER                  DCG_COMBATLOG_TYPES = 13
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_REMOVE_MODIFIER               DCG_COMBATLOG_TYPES = 14
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_KILL                          DCG_COMBATLOG_TYPES = 15
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_CARD_MOVE                     DCG_COMBATLOG_TYPES = 16
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_CREEP_SPAWN                   DCG_COMBATLOG_TYPES = 17
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DEATH                         DCG_COMBATLOG_TYPES = 18
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_COMBAT_OVER                   DCG_COMBATLOG_TYPES = 19
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING     DCG_COMBATLOG_TYPES = 20
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END DCG_COMBATLOG_TYPES = 21
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_UNIT_ENTERING_COMBAT          DCG_COMBATLOG_TYPES = 22
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_UNIT_LEAVING_COMBAT           DCG_COMBATLOG_TYPES = 23
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_TRIGGER_TRIGGERED             DCG_COMBATLOG_TYPES = 24
)

var DCG_COMBATLOG_TYPES_name = map[int32]string{
	-1: "DCG_COMBATLOG_INVALID",
	0:  "DCG_COMBATLOG_DAMAGE",
	1:  "DCG_COMBATLOG_HEAL",
	2:  "DCG_COMBATLOG_DRAW",
	3:  "DCG_COMBATLOG_PASS",
	4:  "DCG_COMBATLOG_COMBAT",
	5:  "DCG_COMBATLOG_PLAY_CREEP",
	6:  "DCG_COMBATLOG_PLAY_IMPROVEMENT",
	7:  "DCG_COMBATLOG_PLAY_SPELL",
	8:  "DCG_COMBATLOG_PLAY_EQUIPMENT",
	9:  "DCG_COMBATLOG_PLAY_ABILITY",
	10: "DCG_COMBATLOG_GAIN_GOLD",
	11: "DCG_COMBATLOG_BUY_ITEM",
	12: "DCG_COMBATLOG_DISCARD",
	13: "DCG_COMBATLOG_ADD_MODIFIER",
	14: "DCG_COMBATLOG_REMOVE_MODIFIER",
	15: "DCG_COMBATLOG_KILL",
	16: "DCG_COMBATLOG_CARD_MOVE",
	17: "DCG_COMBATLOG_CREEP_SPAWN",
	18: "DCG_COMBATLOG_DEATH",
	19: "DCG_COMBATLOG_COMBAT_OVER",
	20: "DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING",
	21: "DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END",
	22: "DCG_COMBATLOG_UNIT_ENTERING_COMBAT",
	23: "DCG_COMBATLOG_UNIT_LEAVING_COMBAT",
	24: "DCG_COMBATLOG_TRIGGER_TRIGGERED",
}
var DCG_COMBATLOG_TYPES_value = map[string]int32{
	"DCG_COMBATLOG_INVALID":                       -1,
	"DCG_COMBATLOG_DAMAGE":                        0,
	"DCG_COMBATLOG_HEAL":                          1,
	"DCG_COMBATLOG_DRAW":                          2,
	"DCG_COMBATLOG_PASS":                          3,
	"DCG_COMBATLOG_COMBAT":                        4,
	"DCG_COMBATLOG_PLAY_CREEP":                    5,
	"DCG_COMBATLOG_PLAY_IMPROVEMENT":              6,
	"DCG_COMBATLOG_PLAY_SPELL":                    7,
	"DCG_COMBATLOG_PLAY_EQUIPMENT":                8,
	"DCG_COMBATLOG_PLAY_ABILITY":                  9,
	"DCG_COMBATLOG_GAIN_GOLD":                     10,
	"DCG_COMBATLOG_BUY_ITEM":                      11,
	"DCG_COMBATLOG_DISCARD":                       12,
	"DCG_COMBATLOG_ADD_MODIFIER":                  13,
	"DCG_COMBATLOG_REMOVE_MODIFIER":               14,
	"DCG_COMBATLOG_KILL":                          15,
	"DCG_COMBATLOG_CARD_MOVE":                     16,
	"DCG_COMBATLOG_CREEP_SPAWN":                   17,
	"DCG_COMBATLOG_DEATH":                         18,
	"DCG_COMBATLOG_COMBAT_OVER":                   19,
	"DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING":     20,
	"DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END": 21,
	"DCG_COMBATLOG_UNIT_ENTERING_COMBAT":          22,
	"DCG_COMBATLOG_UNIT_LEAVING_COMBAT":           23,
	"DCG_COMBATLOG_TRIGGER_TRIGGERED":             24,
}

func (x DCG_COMBATLOG_TYPES) Enum() *DCG_COMBATLOG_TYPES {
	p := new(DCG_COMBATLOG_TYPES)
	*p = x
	return p
}
func (x DCG_COMBATLOG_TYPES) String() string {
	return proto.EnumName(DCG_COMBATLOG_TYPES_name, int32(x))
}
func (x *DCG_COMBATLOG_TYPES) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DCG_COMBATLOG_TYPES_value, data, "DCG_COMBATLOG_TYPES")
	if err != nil {
		return err
	}
	*x = DCG_COMBATLOG_TYPES(value)
	return nil
}
func (DCG_COMBATLOG_TYPES) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{7}
}

type CSOGameAccountClient_EFlags int32

const (
	CSOGameAccountClient_k_eDeveloper CSOGameAccountClient_EFlags = 1
)

var CSOGameAccountClient_EFlags_name = map[int32]string{
	1: "k_eDeveloper",
}
var CSOGameAccountClient_EFlags_value = map[string]int32{
	"k_eDeveloper": 1,
}

func (x CSOGameAccountClient_EFlags) Enum() *CSOGameAccountClient_EFlags {
	p := new(CSOGameAccountClient_EFlags)
	*p = x
	return p
}
func (x CSOGameAccountClient_EFlags) String() string {
	return proto.EnumName(CSOGameAccountClient_EFlags_name, int32(x))
}
func (x *CSOGameAccountClient_EFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSOGameAccountClient_EFlags_value, data, "CSOGameAccountClient_EFlags")
	if err != nil {
		return err
	}
	*x = CSOGameAccountClient_EFlags(value)
	return nil
}
func (CSOGameAccountClient_EFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{3, 0}
}

type CSOGauntlet_EMatchStatus int32

const (
	CSOGauntlet_k_eStatusUnplayed     CSOGauntlet_EMatchStatus = 0
	CSOGauntlet_k_eStatusLoss         CSOGauntlet_EMatchStatus = 1
	CSOGauntlet_k_eStatusWin          CSOGauntlet_EMatchStatus = 2
	CSOGauntlet_k_eStatusTie          CSOGauntlet_EMatchStatus = 3
	CSOGauntlet_k_eStatusDisqualified CSOGauntlet_EMatchStatus = 4
	CSOGauntlet_k_eStatusError        CSOGauntlet_EMatchStatus = 5
)

var CSOGauntlet_EMatchStatus_name = map[int32]string{
	0: "k_eStatusUnplayed",
	1: "k_eStatusLoss",
	2: "k_eStatusWin",
	3: "k_eStatusTie",
	4: "k_eStatusDisqualified",
	5: "k_eStatusError",
}
var CSOGauntlet_EMatchStatus_value = map[string]int32{
	"k_eStatusUnplayed":     0,
	"k_eStatusLoss":         1,
	"k_eStatusWin":          2,
	"k_eStatusTie":          3,
	"k_eStatusDisqualified": 4,
	"k_eStatusError":        5,
}

func (x CSOGauntlet_EMatchStatus) Enum() *CSOGauntlet_EMatchStatus {
	p := new(CSOGauntlet_EMatchStatus)
	*p = x
	return p
}
func (x CSOGauntlet_EMatchStatus) String() string {
	return proto.EnumName(CSOGauntlet_EMatchStatus_name, int32(x))
}
func (x *CSOGauntlet_EMatchStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSOGauntlet_EMatchStatus_value, data, "CSOGauntlet_EMatchStatus")
	if err != nil {
		return err
	}
	*x = CSOGauntlet_EMatchStatus(value)
	return nil
}
func (CSOGauntlet_EMatchStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{4, 0}
}

type CMsgDeckValdiationConfig_ERarity int32

const (
	CMsgDeckValdiationConfig_eRarity_Common   CMsgDeckValdiationConfig_ERarity = 1
	CMsgDeckValdiationConfig_eRarity_Uncommon CMsgDeckValdiationConfig_ERarity = 2
	CMsgDeckValdiationConfig_eRarity_Rare     CMsgDeckValdiationConfig_ERarity = 3
)

var CMsgDeckValdiationConfig_ERarity_name = map[int32]string{
	1: "eRarity_Common",
	2: "eRarity_Uncommon",
	3: "eRarity_Rare",
}
var CMsgDeckValdiationConfig_ERarity_value = map[string]int32{
	"eRarity_Common":   1,
	"eRarity_Uncommon": 2,
	"eRarity_Rare":     3,
}

func (x CMsgDeckValdiationConfig_ERarity) Enum() *CMsgDeckValdiationConfig_ERarity {
	p := new(CMsgDeckValdiationConfig_ERarity)
	*p = x
	return p
}
func (x CMsgDeckValdiationConfig_ERarity) String() string {
	return proto.EnumName(CMsgDeckValdiationConfig_ERarity_name, int32(x))
}
func (x *CMsgDeckValdiationConfig_ERarity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDeckValdiationConfig_ERarity_value, data, "CMsgDeckValdiationConfig_ERarity")
	if err != nil {
		return err
	}
	*x = CMsgDeckValdiationConfig_ERarity(value)
	return nil
}
func (CMsgDeckValdiationConfig_ERarity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{12, 0}
}

type CMsgGauntletConfig_EGrantType int32

const (
	CMsgGauntletConfig_kGrant_Unknown CMsgGauntletConfig_EGrantType = 0
	CMsgGauntletConfig_kGrant_Hero    CMsgGauntletConfig_EGrantType = 1
	CMsgGauntletConfig_kGrant_Card    CMsgGauntletConfig_EGrantType = 2
	CMsgGauntletConfig_kGrant_Item    CMsgGauntletConfig_EGrantType = 3
	CMsgGauntletConfig_kGrant_Pack    CMsgGauntletConfig_EGrantType = 4
)

var CMsgGauntletConfig_EGrantType_name = map[int32]string{
	0: "kGrant_Unknown",
	1: "kGrant_Hero",
	2: "kGrant_Card",
	3: "kGrant_Item",
	4: "kGrant_Pack",
}
var CMsgGauntletConfig_EGrantType_value = map[string]int32{
	"kGrant_Unknown": 0,
	"kGrant_Hero":    1,
	"kGrant_Card":    2,
	"kGrant_Item":    3,
	"kGrant_Pack":    4,
}

func (x CMsgGauntletConfig_EGrantType) Enum() *CMsgGauntletConfig_EGrantType {
	p := new(CMsgGauntletConfig_EGrantType)
	*p = x
	return p
}
func (x CMsgGauntletConfig_EGrantType) String() string {
	return proto.EnumName(CMsgGauntletConfig_EGrantType_name, int32(x))
}
func (x *CMsgGauntletConfig_EGrantType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgGauntletConfig_EGrantType_value, data, "CMsgGauntletConfig_EGrantType")
	if err != nil {
		return err
	}
	*x = CMsgGauntletConfig_EGrantType(value)
	return nil
}
func (CMsgGauntletConfig_EGrantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{15, 0}
}

type CExtraMsgBlock struct {
	MsgType              *uint32  `protobuf:"varint,1,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	MsgKey               *uint64  `protobuf:"varint,3,opt,name=msg_key,json=msgKey" json:"msg_key,omitempty"`
	IsCompressed         *bool    `protobuf:"varint,4,opt,name=is_compressed,json=isCompressed" json:"is_compressed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CExtraMsgBlock) Reset()         { *m = CExtraMsgBlock{} }
func (m *CExtraMsgBlock) String() string { return proto.CompactTextString(m) }
func (*CExtraMsgBlock) ProtoMessage()    {}
func (*CExtraMsgBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{0}
}
func (m *CExtraMsgBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CExtraMsgBlock.Unmarshal(m, b)
}
func (m *CExtraMsgBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CExtraMsgBlock.Marshal(b, m, deterministic)
}
func (dst *CExtraMsgBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CExtraMsgBlock.Merge(dst, src)
}
func (m *CExtraMsgBlock) XXX_Size() int {
	return xxx_messageInfo_CExtraMsgBlock.Size(m)
}
func (m *CExtraMsgBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CExtraMsgBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CExtraMsgBlock proto.InternalMessageInfo

func (m *CExtraMsgBlock) GetMsgType() uint32 {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return 0
}

func (m *CExtraMsgBlock) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *CExtraMsgBlock) GetMsgKey() uint64 {
	if m != nil && m.MsgKey != nil {
		return *m.MsgKey
	}
	return 0
}

func (m *CExtraMsgBlock) GetIsCompressed() bool {
	if m != nil && m.IsCompressed != nil {
		return *m.IsCompressed
	}
	return false
}

type CSODCGLobby struct {
	Members              []*CSODCGLobby_Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	ExtraMessages        []*CExtraMsgBlock     `protobuf:"bytes,2,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId        *uint64               `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId              *uint64               `protobuf:"varint,5,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId              *uint64               `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LeagueId             *uint32               `protobuf:"varint,7,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	ServerState          *ELobbyServerState    `protobuf:"varint,8,opt,name=server_state,json=serverState,enum=ELobbyServerState,def=0" json:"server_state,omitempty"`
	ReplaySalt           *uint32               `protobuf:"fixed32,9,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	MatchMode            *EDCGMatchMode        `protobuf:"varint,10,opt,name=match_mode,json=matchMode,enum=EDCGMatchMode,def=1" json:"match_mode,omitempty"`
	UdpConnectIp         *uint32               `protobuf:"varint,11,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort       *uint32               `protobuf:"varint,12,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
	TournamentId         *uint32               `protobuf:"varint,13,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentSeriesId   *uint32               `protobuf:"varint,14,opt,name=tournament_series_id,json=tournamentSeriesId" json:"tournament_series_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CSODCGLobby) Reset()         { *m = CSODCGLobby{} }
func (m *CSODCGLobby) String() string { return proto.CompactTextString(m) }
func (*CSODCGLobby) ProtoMessage()    {}
func (*CSODCGLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{1}
}
func (m *CSODCGLobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGLobby.Unmarshal(m, b)
}
func (m *CSODCGLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGLobby.Marshal(b, m, deterministic)
}
func (dst *CSODCGLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGLobby.Merge(dst, src)
}
func (m *CSODCGLobby) XXX_Size() int {
	return xxx_messageInfo_CSODCGLobby.Size(m)
}
func (m *CSODCGLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGLobby proto.InternalMessageInfo

const Default_CSODCGLobby_ServerState ELobbyServerState = ELobbyServerState_k_eLobbyServerState_Assign
const Default_CSODCGLobby_MatchMode EDCGMatchMode = EDCGMatchMode_k_EDCGMatchMode_NewUser

func (m *CSODCGLobby) GetMembers() []*CSODCGLobby_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODCGLobby) GetExtraMessages() []*CExtraMsgBlock {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODCGLobby) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CSODCGLobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODCGLobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODCGLobby) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CSODCGLobby) GetServerState() ELobbyServerState {
	if m != nil && m.ServerState != nil {
		return *m.ServerState
	}
	return Default_CSODCGLobby_ServerState
}

func (m *CSODCGLobby) GetReplaySalt() uint32 {
	if m != nil && m.ReplaySalt != nil {
		return *m.ReplaySalt
	}
	return 0
}

func (m *CSODCGLobby) GetMatchMode() EDCGMatchMode {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return Default_CSODCGLobby_MatchMode
}

func (m *CSODCGLobby) GetUdpConnectIp() uint32 {
	if m != nil && m.UdpConnectIp != nil {
		return *m.UdpConnectIp
	}
	return 0
}

func (m *CSODCGLobby) GetUdpConnectPort() uint32 {
	if m != nil && m.UdpConnectPort != nil {
		return *m.UdpConnectPort
	}
	return 0
}

func (m *CSODCGLobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODCGLobby) GetTournamentSeriesId() uint32 {
	if m != nil && m.TournamentSeriesId != nil {
		return *m.TournamentSeriesId
	}
	return 0
}

type CSODCGLobby_Member struct {
	AccountId            *uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName          *string        `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team                 *EDCGLobbyTeam `protobuf:"varint,3,opt,name=team,enum=EDCGLobbyTeam,def=0" json:"team,omitempty"`
	HasLeft              *bool          `protobuf:"varint,4,opt,name=has_left,json=hasLeft" json:"has_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CSODCGLobby_Member) Reset()         { *m = CSODCGLobby_Member{} }
func (m *CSODCGLobby_Member) String() string { return proto.CompactTextString(m) }
func (*CSODCGLobby_Member) ProtoMessage()    {}
func (*CSODCGLobby_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{1, 0}
}
func (m *CSODCGLobby_Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGLobby_Member.Unmarshal(m, b)
}
func (m *CSODCGLobby_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGLobby_Member.Marshal(b, m, deterministic)
}
func (dst *CSODCGLobby_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGLobby_Member.Merge(dst, src)
}
func (m *CSODCGLobby_Member) XXX_Size() int {
	return xxx_messageInfo_CSODCGLobby_Member.Size(m)
}
func (m *CSODCGLobby_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGLobby_Member.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGLobby_Member proto.InternalMessageInfo

const Default_CSODCGLobby_Member_Team EDCGLobbyTeam = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0

func (m *CSODCGLobby_Member) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODCGLobby_Member) GetPersonaName() string {
	if m != nil && m.PersonaName != nil {
		return *m.PersonaName
	}
	return ""
}

func (m *CSODCGLobby_Member) GetTeam() EDCGLobbyTeam {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CSODCGLobby_Member_Team
}

func (m *CSODCGLobby_Member) GetHasLeft() bool {
	if m != nil && m.HasLeft != nil {
		return *m.HasLeft
	}
	return false
}

type CLobbyData_PostMatchSurvey struct {
	Surveys              []*CLobbyData_PostMatchSurvey_PlayerSurvey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CLobbyData_PostMatchSurvey) Reset()         { *m = CLobbyData_PostMatchSurvey{} }
func (m *CLobbyData_PostMatchSurvey) String() string { return proto.CompactTextString(m) }
func (*CLobbyData_PostMatchSurvey) ProtoMessage()    {}
func (*CLobbyData_PostMatchSurvey) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{2}
}
func (m *CLobbyData_PostMatchSurvey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey.Unmarshal(m, b)
}
func (m *CLobbyData_PostMatchSurvey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey.Marshal(b, m, deterministic)
}
func (dst *CLobbyData_PostMatchSurvey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyData_PostMatchSurvey.Merge(dst, src)
}
func (m *CLobbyData_PostMatchSurvey) XXX_Size() int {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey.Size(m)
}
func (m *CLobbyData_PostMatchSurvey) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyData_PostMatchSurvey.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyData_PostMatchSurvey proto.InternalMessageInfo

func (m *CLobbyData_PostMatchSurvey) GetSurveys() []*CLobbyData_PostMatchSurvey_PlayerSurvey {
	if m != nil {
		return m.Surveys
	}
	return nil
}

type CLobbyData_PostMatchSurvey_PlayerSurvey struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestionId           *uint32  `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) Reset() {
	*m = CLobbyData_PostMatchSurvey_PlayerSurvey{}
}
func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) String() string { return proto.CompactTextString(m) }
func (*CLobbyData_PostMatchSurvey_PlayerSurvey) ProtoMessage()    {}
func (*CLobbyData_PostMatchSurvey_PlayerSurvey) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{2, 0}
}
func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey.Unmarshal(m, b)
}
func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey.Marshal(b, m, deterministic)
}
func (dst *CLobbyData_PostMatchSurvey_PlayerSurvey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey.Merge(dst, src)
}
func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) XXX_Size() int {
	return xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey.Size(m)
}
func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyData_PostMatchSurvey_PlayerSurvey proto.InternalMessageInfo

func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyData_PostMatchSurvey_PlayerSurvey) GetQuestionId() uint32 {
	if m != nil && m.QuestionId != nil {
		return *m.QuestionId
	}
	return 0
}

type CSOGameAccountClient struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PhantomLeague        *uint32  `protobuf:"varint,2,opt,name=phantom_league,json=phantomLeague" json:"phantom_league,omitempty"`
	Flags                *uint32  `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSOGameAccountClient) Reset()         { *m = CSOGameAccountClient{} }
func (m *CSOGameAccountClient) String() string { return proto.CompactTextString(m) }
func (*CSOGameAccountClient) ProtoMessage()    {}
func (*CSOGameAccountClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{3}
}
func (m *CSOGameAccountClient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOGameAccountClient.Unmarshal(m, b)
}
func (m *CSOGameAccountClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOGameAccountClient.Marshal(b, m, deterministic)
}
func (dst *CSOGameAccountClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOGameAccountClient.Merge(dst, src)
}
func (m *CSOGameAccountClient) XXX_Size() int {
	return xxx_messageInfo_CSOGameAccountClient.Size(m)
}
func (m *CSOGameAccountClient) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOGameAccountClient.DiscardUnknown(m)
}

var xxx_messageInfo_CSOGameAccountClient proto.InternalMessageInfo

func (m *CSOGameAccountClient) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSOGameAccountClient) GetPhantomLeague() uint32 {
	if m != nil && m.PhantomLeague != nil {
		return *m.PhantomLeague
	}
	return 0
}

func (m *CSOGameAccountClient) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type CSOGauntlet struct {
	AccountId            *uint32              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GauntletId           *uint32              `protobuf:"varint,2,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ActiveLobbyId        *uint64              `protobuf:"varint,3,opt,name=active_lobby_id,json=activeLobbyId" json:"active_lobby_id,omitempty"`
	AbandonedTime        *uint32              `protobuf:"varint,4,opt,name=abandoned_time,json=abandonedTime" json:"abandoned_time,omitempty"`
	DeckCode             []byte               `protobuf:"bytes,5,opt,name=deck_code,json=deckCode" json:"deck_code,omitempty"`
	RankingScore         *uint32              `protobuf:"varint,6,opt,name=ranking_score,json=rankingScore" json:"ranking_score,omitempty"`
	MatchList            []*CSOGauntlet_Match `protobuf:"bytes,7,rep,name=match_list,json=matchList" json:"match_list,omitempty"`
	GrantStage           *uint32              `protobuf:"varint,8,opt,name=grant_stage,json=grantStage" json:"grant_stage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CSOGauntlet) Reset()         { *m = CSOGauntlet{} }
func (m *CSOGauntlet) String() string { return proto.CompactTextString(m) }
func (*CSOGauntlet) ProtoMessage()    {}
func (*CSOGauntlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{4}
}
func (m *CSOGauntlet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOGauntlet.Unmarshal(m, b)
}
func (m *CSOGauntlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOGauntlet.Marshal(b, m, deterministic)
}
func (dst *CSOGauntlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOGauntlet.Merge(dst, src)
}
func (m *CSOGauntlet) XXX_Size() int {
	return xxx_messageInfo_CSOGauntlet.Size(m)
}
func (m *CSOGauntlet) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOGauntlet.DiscardUnknown(m)
}

var xxx_messageInfo_CSOGauntlet proto.InternalMessageInfo

func (m *CSOGauntlet) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSOGauntlet) GetGauntletId() uint32 {
	if m != nil && m.GauntletId != nil {
		return *m.GauntletId
	}
	return 0
}

func (m *CSOGauntlet) GetActiveLobbyId() uint64 {
	if m != nil && m.ActiveLobbyId != nil {
		return *m.ActiveLobbyId
	}
	return 0
}

func (m *CSOGauntlet) GetAbandonedTime() uint32 {
	if m != nil && m.AbandonedTime != nil {
		return *m.AbandonedTime
	}
	return 0
}

func (m *CSOGauntlet) GetDeckCode() []byte {
	if m != nil {
		return m.DeckCode
	}
	return nil
}

func (m *CSOGauntlet) GetRankingScore() uint32 {
	if m != nil && m.RankingScore != nil {
		return *m.RankingScore
	}
	return 0
}

func (m *CSOGauntlet) GetMatchList() []*CSOGauntlet_Match {
	if m != nil {
		return m.MatchList
	}
	return nil
}

func (m *CSOGauntlet) GetGrantStage() uint32 {
	if m != nil && m.GrantStage != nil {
		return *m.GrantStage
	}
	return 0
}

type CSOGauntlet_Match struct {
	Status               *CSOGauntlet_EMatchStatus `protobuf:"varint,1,opt,name=status,enum=CSOGauntlet_EMatchStatus,def=0" json:"status,omitempty"`
	MatchId              *uint64                   `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CSOGauntlet_Match) Reset()         { *m = CSOGauntlet_Match{} }
func (m *CSOGauntlet_Match) String() string { return proto.CompactTextString(m) }
func (*CSOGauntlet_Match) ProtoMessage()    {}
func (*CSOGauntlet_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{4, 0}
}
func (m *CSOGauntlet_Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOGauntlet_Match.Unmarshal(m, b)
}
func (m *CSOGauntlet_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOGauntlet_Match.Marshal(b, m, deterministic)
}
func (dst *CSOGauntlet_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOGauntlet_Match.Merge(dst, src)
}
func (m *CSOGauntlet_Match) XXX_Size() int {
	return xxx_messageInfo_CSOGauntlet_Match.Size(m)
}
func (m *CSOGauntlet_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOGauntlet_Match.DiscardUnknown(m)
}

var xxx_messageInfo_CSOGauntlet_Match proto.InternalMessageInfo

const Default_CSOGauntlet_Match_Status CSOGauntlet_EMatchStatus = CSOGauntlet_k_eStatusUnplayed

func (m *CSOGauntlet_Match) GetStatus() CSOGauntlet_EMatchStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_CSOGauntlet_Match_Status
}

func (m *CSOGauntlet_Match) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

type CSOPhantomItem struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PhantomLeague        *uint32  `protobuf:"varint,2,opt,name=phantom_league,json=phantomLeague" json:"phantom_league,omitempty"`
	DefIndex             *uint32  `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	PhantomId            *uint64  `protobuf:"varint,4,opt,name=phantom_id,json=phantomId" json:"phantom_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSOPhantomItem) Reset()         { *m = CSOPhantomItem{} }
func (m *CSOPhantomItem) String() string { return proto.CompactTextString(m) }
func (*CSOPhantomItem) ProtoMessage()    {}
func (*CSOPhantomItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{5}
}
func (m *CSOPhantomItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOPhantomItem.Unmarshal(m, b)
}
func (m *CSOPhantomItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOPhantomItem.Marshal(b, m, deterministic)
}
func (dst *CSOPhantomItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOPhantomItem.Merge(dst, src)
}
func (m *CSOPhantomItem) XXX_Size() int {
	return xxx_messageInfo_CSOPhantomItem.Size(m)
}
func (m *CSOPhantomItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOPhantomItem.DiscardUnknown(m)
}

var xxx_messageInfo_CSOPhantomItem proto.InternalMessageInfo

func (m *CSOPhantomItem) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSOPhantomItem) GetPhantomLeague() uint32 {
	if m != nil && m.PhantomLeague != nil {
		return *m.PhantomLeague
	}
	return 0
}

func (m *CSOPhantomItem) GetDefIndex() uint32 {
	if m != nil && m.DefIndex != nil {
		return *m.DefIndex
	}
	return 0
}

func (m *CSOPhantomItem) GetPhantomId() uint64 {
	if m != nil && m.PhantomId != nil {
		return *m.PhantomId
	}
	return 0
}

type CSOCardAchievement struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AchievementId        *uint32  `protobuf:"varint,2,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Progress             *uint32  `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSOCardAchievement) Reset()         { *m = CSOCardAchievement{} }
func (m *CSOCardAchievement) String() string { return proto.CompactTextString(m) }
func (*CSOCardAchievement) ProtoMessage()    {}
func (*CSOCardAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{6}
}
func (m *CSOCardAchievement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOCardAchievement.Unmarshal(m, b)
}
func (m *CSOCardAchievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOCardAchievement.Marshal(b, m, deterministic)
}
func (dst *CSOCardAchievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOCardAchievement.Merge(dst, src)
}
func (m *CSOCardAchievement) XXX_Size() int {
	return xxx_messageInfo_CSOCardAchievement.Size(m)
}
func (m *CSOCardAchievement) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOCardAchievement.DiscardUnknown(m)
}

var xxx_messageInfo_CSOCardAchievement proto.InternalMessageInfo

func (m *CSOCardAchievement) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSOCardAchievement) GetAchievementId() uint32 {
	if m != nil && m.AchievementId != nil {
		return *m.AchievementId
	}
	return 0
}

func (m *CSOCardAchievement) GetProgress() uint32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CSOLeagueMembership struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	AccountId            *uint32  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Flags                *uint32  `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	PacksGranted         *uint32  `protobuf:"varint,4,opt,name=packs_granted,json=packsGranted" json:"packs_granted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSOLeagueMembership) Reset()         { *m = CSOLeagueMembership{} }
func (m *CSOLeagueMembership) String() string { return proto.CompactTextString(m) }
func (*CSOLeagueMembership) ProtoMessage()    {}
func (*CSOLeagueMembership) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{7}
}
func (m *CSOLeagueMembership) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSOLeagueMembership.Unmarshal(m, b)
}
func (m *CSOLeagueMembership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSOLeagueMembership.Marshal(b, m, deterministic)
}
func (dst *CSOLeagueMembership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOLeagueMembership.Merge(dst, src)
}
func (m *CSOLeagueMembership) XXX_Size() int {
	return xxx_messageInfo_CSOLeagueMembership.Size(m)
}
func (m *CSOLeagueMembership) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOLeagueMembership.DiscardUnknown(m)
}

var xxx_messageInfo_CSOLeagueMembership proto.InternalMessageInfo

func (m *CSOLeagueMembership) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CSOLeagueMembership) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSOLeagueMembership) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CSOLeagueMembership) GetPacksGranted() uint32 {
	if m != nil && m.PacksGranted != nil {
		return *m.PacksGranted
	}
	return 0
}

type CMsgStartFindingMatchInfo struct {
	LeagueId             *uint32        `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	ServerSearchKey      *string        `protobuf:"bytes,2,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	ClientVersion        *uint32        `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	MatchMode            *EDCGMatchMode `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=EDCGMatchMode,def=1" json:"match_mode,omitempty"`
	DeckData             []byte         `protobuf:"bytes,5,opt,name=deck_data,json=deckData" json:"deck_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CMsgStartFindingMatchInfo) Reset()         { *m = CMsgStartFindingMatchInfo{} }
func (m *CMsgStartFindingMatchInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgStartFindingMatchInfo) ProtoMessage()    {}
func (*CMsgStartFindingMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{8}
}
func (m *CMsgStartFindingMatchInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgStartFindingMatchInfo.Unmarshal(m, b)
}
func (m *CMsgStartFindingMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgStartFindingMatchInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgStartFindingMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgStartFindingMatchInfo.Merge(dst, src)
}
func (m *CMsgStartFindingMatchInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgStartFindingMatchInfo.Size(m)
}
func (m *CMsgStartFindingMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgStartFindingMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgStartFindingMatchInfo proto.InternalMessageInfo

const Default_CMsgStartFindingMatchInfo_MatchMode EDCGMatchMode = EDCGMatchMode_k_EDCGMatchMode_NewUser

func (m *CMsgStartFindingMatchInfo) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgStartFindingMatchInfo) GetServerSearchKey() string {
	if m != nil && m.ServerSearchKey != nil {
		return *m.ServerSearchKey
	}
	return ""
}

func (m *CMsgStartFindingMatchInfo) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgStartFindingMatchInfo) GetMatchMode() EDCGMatchMode {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return Default_CMsgStartFindingMatchInfo_MatchMode
}

func (m *CMsgStartFindingMatchInfo) GetDeckData() []byte {
	if m != nil {
		return m.DeckData
	}
	return nil
}

type CSODCGPlayerCurrency struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrencyId           *uint32  `protobuf:"varint,2,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Balance              *uint32  `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
	Flags                *uint32  `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	TradeRestriction     *uint32  `protobuf:"varint,5,opt,name=trade_restriction,json=tradeRestriction" json:"trade_restriction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODCGPlayerCurrency) Reset()         { *m = CSODCGPlayerCurrency{} }
func (m *CSODCGPlayerCurrency) String() string { return proto.CompactTextString(m) }
func (*CSODCGPlayerCurrency) ProtoMessage()    {}
func (*CSODCGPlayerCurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{9}
}
func (m *CSODCGPlayerCurrency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPlayerCurrency.Unmarshal(m, b)
}
func (m *CSODCGPlayerCurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPlayerCurrency.Marshal(b, m, deterministic)
}
func (dst *CSODCGPlayerCurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPlayerCurrency.Merge(dst, src)
}
func (m *CSODCGPlayerCurrency) XXX_Size() int {
	return xxx_messageInfo_CSODCGPlayerCurrency.Size(m)
}
func (m *CSODCGPlayerCurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPlayerCurrency.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPlayerCurrency proto.InternalMessageInfo

func (m *CSODCGPlayerCurrency) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODCGPlayerCurrency) GetCurrencyId() uint32 {
	if m != nil && m.CurrencyId != nil {
		return *m.CurrencyId
	}
	return 0
}

func (m *CSODCGPlayerCurrency) GetBalance() uint32 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *CSODCGPlayerCurrency) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CSODCGPlayerCurrency) GetTradeRestriction() uint32 {
	if m != nil && m.TradeRestriction != nil {
		return *m.TradeRestriction
	}
	return 0
}

type CSODCGPlayerRating struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RatingId             *uint32  `protobuf:"varint,2,opt,name=rating_id,json=ratingId" json:"rating_id,omitempty"`
	Rating               *uint32  `protobuf:"varint,3,opt,name=rating" json:"rating,omitempty"`
	MatchesPlayed        *uint32  `protobuf:"varint,4,opt,name=matches_played,json=matchesPlayed" json:"matches_played,omitempty"`
	MatchesWon           *uint32  `protobuf:"varint,5,opt,name=matches_won,json=matchesWon" json:"matches_won,omitempty"`
	IsHeroRank           *bool    `protobuf:"varint,6,opt,name=is_hero_rank,json=isHeroRank" json:"is_hero_rank,omitempty"`
	CurrentStreak        *uint32  `protobuf:"varint,7,opt,name=current_streak,json=currentStreak" json:"current_streak,omitempty"`
	BestStreak           *uint32  `protobuf:"varint,8,opt,name=best_streak,json=bestStreak" json:"best_streak,omitempty"`
	PeakRating           *uint32  `protobuf:"varint,9,opt,name=peak_rating,json=peakRating" json:"peak_rating,omitempty"`
	Season               *uint32  `protobuf:"varint,10,opt,name=season" json:"season,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODCGPlayerRating) Reset()         { *m = CSODCGPlayerRating{} }
func (m *CSODCGPlayerRating) String() string { return proto.CompactTextString(m) }
func (*CSODCGPlayerRating) ProtoMessage()    {}
func (*CSODCGPlayerRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{10}
}
func (m *CSODCGPlayerRating) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPlayerRating.Unmarshal(m, b)
}
func (m *CSODCGPlayerRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPlayerRating.Marshal(b, m, deterministic)
}
func (dst *CSODCGPlayerRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPlayerRating.Merge(dst, src)
}
func (m *CSODCGPlayerRating) XXX_Size() int {
	return xxx_messageInfo_CSODCGPlayerRating.Size(m)
}
func (m *CSODCGPlayerRating) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPlayerRating.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPlayerRating proto.InternalMessageInfo

func (m *CSODCGPlayerRating) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODCGPlayerRating) GetRatingId() uint32 {
	if m != nil && m.RatingId != nil {
		return *m.RatingId
	}
	return 0
}

func (m *CSODCGPlayerRating) GetRating() uint32 {
	if m != nil && m.Rating != nil {
		return *m.Rating
	}
	return 0
}

func (m *CSODCGPlayerRating) GetMatchesPlayed() uint32 {
	if m != nil && m.MatchesPlayed != nil {
		return *m.MatchesPlayed
	}
	return 0
}

func (m *CSODCGPlayerRating) GetMatchesWon() uint32 {
	if m != nil && m.MatchesWon != nil {
		return *m.MatchesWon
	}
	return 0
}

func (m *CSODCGPlayerRating) GetIsHeroRank() bool {
	if m != nil && m.IsHeroRank != nil {
		return *m.IsHeroRank
	}
	return false
}

func (m *CSODCGPlayerRating) GetCurrentStreak() uint32 {
	if m != nil && m.CurrentStreak != nil {
		return *m.CurrentStreak
	}
	return 0
}

func (m *CSODCGPlayerRating) GetBestStreak() uint32 {
	if m != nil && m.BestStreak != nil {
		return *m.BestStreak
	}
	return 0
}

func (m *CSODCGPlayerRating) GetPeakRating() uint32 {
	if m != nil && m.PeakRating != nil {
		return *m.PeakRating
	}
	return 0
}

func (m *CSODCGPlayerRating) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

type CMsgDCGCombatLogEntry struct {
	Type                 *DCG_COMBATLOG_TYPES `protobuf:"varint,1,opt,name=type,enum=DCG_COMBATLOG_TYPES,def=-1" json:"type,omitempty"`
	TargetCardId         *uint32              `protobuf:"varint,2,opt,name=target_card_id,json=targetCardId" json:"target_card_id,omitempty"`
	TargetObjectId       *uint32              `protobuf:"varint,3,opt,name=target_object_id,json=targetObjectId" json:"target_object_id,omitempty"`
	TargetOwner          *uint32              `protobuf:"varint,4,opt,name=target_owner,json=targetOwner" json:"target_owner,omitempty"`
	SourceCardId         *uint32              `protobuf:"varint,5,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	SourceObjectId       *uint32              `protobuf:"varint,6,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceOwner          *uint32              `protobuf:"varint,7,opt,name=source_owner,json=sourceOwner" json:"source_owner,omitempty"`
	Value                *uint32              `protobuf:"varint,8,opt,name=value" json:"value,omitempty"`
	TargetAttack         *int32               `protobuf:"varint,9,opt,name=target_attack,json=targetAttack" json:"target_attack,omitempty"`
	TargetArmor          *int32               `protobuf:"varint,10,opt,name=target_armor,json=targetArmor" json:"target_armor,omitempty"`
	TargetHealth         *int32               `protobuf:"varint,11,opt,name=target_health,json=targetHealth" json:"target_health,omitempty"`
	SourceAttack         *int32               `protobuf:"varint,12,opt,name=source_attack,json=sourceAttack" json:"source_attack,omitempty"`
	SourceArmor          *int32               `protobuf:"varint,13,opt,name=source_armor,json=sourceArmor" json:"source_armor,omitempty"`
	SourceHealth         *int32               `protobuf:"varint,14,opt,name=source_health,json=sourceHealth" json:"source_health,omitempty"`
	Turnstamp            *uint32              `protobuf:"varint,15,opt,name=turnstamp" json:"turnstamp,omitempty"`
	SourceLane           *uint32              `protobuf:"varint,16,opt,name=source_lane,json=sourceLane" json:"source_lane,omitempty"`
	TargetLane           *uint32              `protobuf:"varint,17,opt,name=target_lane,json=targetLane" json:"target_lane,omitempty"`
	SourceParentCardId   *uint32              `protobuf:"varint,18,opt,name=source_parent_card_id,json=sourceParentCardId" json:"source_parent_card_id,omitempty"`
	SourceParentObjectId *uint32              `protobuf:"varint,19,opt,name=source_parent_object_id,json=sourceParentObjectId" json:"source_parent_object_id,omitempty"`
	ModifierType         *uint32              `protobuf:"varint,20,opt,name=modifier_type,json=modifierType" json:"modifier_type,omitempty"`
	Piercing             *bool                `protobuf:"varint,21,opt,name=piercing" json:"piercing,omitempty"`
	EffectName           *string              `protobuf:"bytes,22,opt,name=effect_name,json=effectName" json:"effect_name,omitempty"`
	TargetCombatPosition *uint32              `protobuf:"varint,23,opt,name=target_combat_position,json=targetCombatPosition" json:"target_combat_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CMsgDCGCombatLogEntry) Reset()         { *m = CMsgDCGCombatLogEntry{} }
func (m *CMsgDCGCombatLogEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgDCGCombatLogEntry) ProtoMessage()    {}
func (*CMsgDCGCombatLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{11}
}
func (m *CMsgDCGCombatLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDCGCombatLogEntry.Unmarshal(m, b)
}
func (m *CMsgDCGCombatLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDCGCombatLogEntry.Marshal(b, m, deterministic)
}
func (dst *CMsgDCGCombatLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDCGCombatLogEntry.Merge(dst, src)
}
func (m *CMsgDCGCombatLogEntry) XXX_Size() int {
	return xxx_messageInfo_CMsgDCGCombatLogEntry.Size(m)
}
func (m *CMsgDCGCombatLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDCGCombatLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDCGCombatLogEntry proto.InternalMessageInfo

const Default_CMsgDCGCombatLogEntry_Type DCG_COMBATLOG_TYPES = DCG_COMBATLOG_TYPES_DCG_COMBATLOG_INVALID

func (m *CMsgDCGCombatLogEntry) GetType() DCG_COMBATLOG_TYPES {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMsgDCGCombatLogEntry_Type
}

func (m *CMsgDCGCombatLogEntry) GetTargetCardId() uint32 {
	if m != nil && m.TargetCardId != nil {
		return *m.TargetCardId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetObjectId() uint32 {
	if m != nil && m.TargetObjectId != nil {
		return *m.TargetObjectId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetOwner() uint32 {
	if m != nil && m.TargetOwner != nil {
		return *m.TargetOwner
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceCardId() uint32 {
	if m != nil && m.SourceCardId != nil {
		return *m.SourceCardId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceObjectId() uint32 {
	if m != nil && m.SourceObjectId != nil {
		return *m.SourceObjectId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceOwner() uint32 {
	if m != nil && m.SourceOwner != nil {
		return *m.SourceOwner
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetAttack() int32 {
	if m != nil && m.TargetAttack != nil {
		return *m.TargetAttack
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetArmor() int32 {
	if m != nil && m.TargetArmor != nil {
		return *m.TargetArmor
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetHealth() int32 {
	if m != nil && m.TargetHealth != nil {
		return *m.TargetHealth
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceAttack() int32 {
	if m != nil && m.SourceAttack != nil {
		return *m.SourceAttack
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceArmor() int32 {
	if m != nil && m.SourceArmor != nil {
		return *m.SourceArmor
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceHealth() int32 {
	if m != nil && m.SourceHealth != nil {
		return *m.SourceHealth
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTurnstamp() uint32 {
	if m != nil && m.Turnstamp != nil {
		return *m.Turnstamp
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceLane() uint32 {
	if m != nil && m.SourceLane != nil {
		return *m.SourceLane
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetTargetLane() uint32 {
	if m != nil && m.TargetLane != nil {
		return *m.TargetLane
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceParentCardId() uint32 {
	if m != nil && m.SourceParentCardId != nil {
		return *m.SourceParentCardId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetSourceParentObjectId() uint32 {
	if m != nil && m.SourceParentObjectId != nil {
		return *m.SourceParentObjectId
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetModifierType() uint32 {
	if m != nil && m.ModifierType != nil {
		return *m.ModifierType
	}
	return 0
}

func (m *CMsgDCGCombatLogEntry) GetPiercing() bool {
	if m != nil && m.Piercing != nil {
		return *m.Piercing
	}
	return false
}

func (m *CMsgDCGCombatLogEntry) GetEffectName() string {
	if m != nil && m.EffectName != nil {
		return *m.EffectName
	}
	return ""
}

func (m *CMsgDCGCombatLogEntry) GetTargetCombatPosition() uint32 {
	if m != nil && m.TargetCombatPosition != nil {
		return *m.TargetCombatPosition
	}
	return 0
}

type CMsgDeckValdiationConfig struct {
	Version              *uint32                               `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	MustOwnCards         *bool                                 `protobuf:"varint,2,opt,name=must_own_cards,json=mustOwnCards" json:"must_own_cards,omitempty"`
	AllowAllSets         *bool                                 `protobuf:"varint,3,opt,name=allow_all_sets,json=allowAllSets" json:"allow_all_sets,omitempty"`
	SetIds               []uint32                              `protobuf:"varint,4,rep,name=set_ids,json=setIds" json:"set_ids,omitempty"`
	MainMin              *uint32                               `protobuf:"varint,5,opt,name=main_min,json=mainMin" json:"main_min,omitempty"`
	MainMax              *uint32                               `protobuf:"varint,6,opt,name=main_max,json=mainMax" json:"main_max,omitempty"`
	ItemsMin             *uint32                               `protobuf:"varint,7,opt,name=items_min,json=itemsMin" json:"items_min,omitempty"`
	ItemsMax             *uint32                               `protobuf:"varint,8,opt,name=items_max,json=itemsMax" json:"items_max,omitempty"`
	MainMaxInstances     *uint32                               `protobuf:"varint,9,opt,name=main_max_instances,json=mainMaxInstances" json:"main_max_instances,omitempty"`
	ItemsMaxInstances    *uint32                               `protobuf:"varint,10,opt,name=items_max_instances,json=itemsMaxInstances" json:"items_max_instances,omitempty"`
	HeroMaxInstances     *uint32                               `protobuf:"varint,11,opt,name=hero_max_instances,json=heroMaxInstances" json:"hero_max_instances,omitempty"`
	CardLimits           []*CMsgDeckValdiationConfig_CardLimit `protobuf:"bytes,12,rep,name=card_limits,json=cardLimits" json:"card_limits,omitempty"`
	RequiredCards        []*CMsgDeckValdiationConfig_CardLimit `protobuf:"bytes,13,rep,name=required_cards,json=requiredCards" json:"required_cards,omitempty"`
	IncludeActiveSets    *bool                                 `protobuf:"varint,14,opt,name=include_active_sets,json=includeActiveSets" json:"include_active_sets,omitempty"`
	BlockedRarities      []CMsgDeckValdiationConfig_ERarity    `protobuf:"varint,15,rep,name=blocked_rarities,json=blockedRarities,enum=CMsgDeckValdiationConfig_ERarity" json:"blocked_rarities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CMsgDeckValdiationConfig) Reset()         { *m = CMsgDeckValdiationConfig{} }
func (m *CMsgDeckValdiationConfig) String() string { return proto.CompactTextString(m) }
func (*CMsgDeckValdiationConfig) ProtoMessage()    {}
func (*CMsgDeckValdiationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{12}
}
func (m *CMsgDeckValdiationConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDeckValdiationConfig.Unmarshal(m, b)
}
func (m *CMsgDeckValdiationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDeckValdiationConfig.Marshal(b, m, deterministic)
}
func (dst *CMsgDeckValdiationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDeckValdiationConfig.Merge(dst, src)
}
func (m *CMsgDeckValdiationConfig) XXX_Size() int {
	return xxx_messageInfo_CMsgDeckValdiationConfig.Size(m)
}
func (m *CMsgDeckValdiationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDeckValdiationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDeckValdiationConfig proto.InternalMessageInfo

func (m *CMsgDeckValdiationConfig) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetMustOwnCards() bool {
	if m != nil && m.MustOwnCards != nil {
		return *m.MustOwnCards
	}
	return false
}

func (m *CMsgDeckValdiationConfig) GetAllowAllSets() bool {
	if m != nil && m.AllowAllSets != nil {
		return *m.AllowAllSets
	}
	return false
}

func (m *CMsgDeckValdiationConfig) GetSetIds() []uint32 {
	if m != nil {
		return m.SetIds
	}
	return nil
}

func (m *CMsgDeckValdiationConfig) GetMainMin() uint32 {
	if m != nil && m.MainMin != nil {
		return *m.MainMin
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetMainMax() uint32 {
	if m != nil && m.MainMax != nil {
		return *m.MainMax
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetItemsMin() uint32 {
	if m != nil && m.ItemsMin != nil {
		return *m.ItemsMin
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetItemsMax() uint32 {
	if m != nil && m.ItemsMax != nil {
		return *m.ItemsMax
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetMainMaxInstances() uint32 {
	if m != nil && m.MainMaxInstances != nil {
		return *m.MainMaxInstances
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetItemsMaxInstances() uint32 {
	if m != nil && m.ItemsMaxInstances != nil {
		return *m.ItemsMaxInstances
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetHeroMaxInstances() uint32 {
	if m != nil && m.HeroMaxInstances != nil {
		return *m.HeroMaxInstances
	}
	return 0
}

func (m *CMsgDeckValdiationConfig) GetCardLimits() []*CMsgDeckValdiationConfig_CardLimit {
	if m != nil {
		return m.CardLimits
	}
	return nil
}

func (m *CMsgDeckValdiationConfig) GetRequiredCards() []*CMsgDeckValdiationConfig_CardLimit {
	if m != nil {
		return m.RequiredCards
	}
	return nil
}

func (m *CMsgDeckValdiationConfig) GetIncludeActiveSets() bool {
	if m != nil && m.IncludeActiveSets != nil {
		return *m.IncludeActiveSets
	}
	return false
}

func (m *CMsgDeckValdiationConfig) GetBlockedRarities() []CMsgDeckValdiationConfig_ERarity {
	if m != nil {
		return m.BlockedRarities
	}
	return nil
}

type CMsgDeckValdiationConfig_CardLimit struct {
	CardId               *uint32  `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	CardCount            *uint32  `protobuf:"varint,2,opt,name=card_count,json=cardCount" json:"card_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDeckValdiationConfig_CardLimit) Reset()         { *m = CMsgDeckValdiationConfig_CardLimit{} }
func (m *CMsgDeckValdiationConfig_CardLimit) String() string { return proto.CompactTextString(m) }
func (*CMsgDeckValdiationConfig_CardLimit) ProtoMessage()    {}
func (*CMsgDeckValdiationConfig_CardLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{12, 0}
}
func (m *CMsgDeckValdiationConfig_CardLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit.Unmarshal(m, b)
}
func (m *CMsgDeckValdiationConfig_CardLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit.Marshal(b, m, deterministic)
}
func (dst *CMsgDeckValdiationConfig_CardLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit.Merge(dst, src)
}
func (m *CMsgDeckValdiationConfig_CardLimit) XXX_Size() int {
	return xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit.Size(m)
}
func (m *CMsgDeckValdiationConfig_CardLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDeckValdiationConfig_CardLimit proto.InternalMessageInfo

func (m *CMsgDeckValdiationConfig_CardLimit) GetCardId() uint32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

func (m *CMsgDeckValdiationConfig_CardLimit) GetCardCount() uint32 {
	if m != nil && m.CardCount != nil {
		return *m.CardCount
	}
	return 0
}

type CMsgAnyToGCReportAsserts struct {
	Version              *uint32                                   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Asserts              []*CMsgAnyToGCReportAsserts_TrackedAssert `protobuf:"bytes,2,rep,name=asserts" json:"asserts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CMsgAnyToGCReportAsserts) Reset()         { *m = CMsgAnyToGCReportAsserts{} }
func (m *CMsgAnyToGCReportAsserts) String() string { return proto.CompactTextString(m) }
func (*CMsgAnyToGCReportAsserts) ProtoMessage()    {}
func (*CMsgAnyToGCReportAsserts) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{13}
}
func (m *CMsgAnyToGCReportAsserts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts.Unmarshal(m, b)
}
func (m *CMsgAnyToGCReportAsserts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts.Marshal(b, m, deterministic)
}
func (dst *CMsgAnyToGCReportAsserts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAnyToGCReportAsserts.Merge(dst, src)
}
func (m *CMsgAnyToGCReportAsserts) XXX_Size() int {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts.Size(m)
}
func (m *CMsgAnyToGCReportAsserts) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAnyToGCReportAsserts.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAnyToGCReportAsserts proto.InternalMessageInfo

func (m *CMsgAnyToGCReportAsserts) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CMsgAnyToGCReportAsserts) GetAsserts() []*CMsgAnyToGCReportAsserts_TrackedAssert {
	if m != nil {
		return m.Asserts
	}
	return nil
}

type CMsgAnyToGCReportAsserts_TrackedAssert struct {
	Filename             *string  `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	LineNumber           *uint32  `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	SampleMsg            *string  `protobuf:"bytes,3,opt,name=sample_msg,json=sampleMsg" json:"sample_msg,omitempty"`
	SampleStack          *string  `protobuf:"bytes,4,opt,name=sample_stack,json=sampleStack" json:"sample_stack,omitempty"`
	TimesFired           *uint32  `protobuf:"varint,5,opt,name=times_fired,json=timesFired" json:"times_fired,omitempty"`
	FunctionName         *string  `protobuf:"bytes,6,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Condition            *string  `protobuf:"bytes,7,opt,name=condition" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) Reset() {
	*m = CMsgAnyToGCReportAsserts_TrackedAssert{}
}
func (m *CMsgAnyToGCReportAsserts_TrackedAssert) String() string { return proto.CompactTextString(m) }
func (*CMsgAnyToGCReportAsserts_TrackedAssert) ProtoMessage()    {}
func (*CMsgAnyToGCReportAsserts_TrackedAssert) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{13, 0}
}
func (m *CMsgAnyToGCReportAsserts_TrackedAssert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert.Unmarshal(m, b)
}
func (m *CMsgAnyToGCReportAsserts_TrackedAssert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert.Marshal(b, m, deterministic)
}
func (dst *CMsgAnyToGCReportAsserts_TrackedAssert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert.Merge(dst, src)
}
func (m *CMsgAnyToGCReportAsserts_TrackedAssert) XXX_Size() int {
	return xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert.Size(m)
}
func (m *CMsgAnyToGCReportAsserts_TrackedAssert) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAnyToGCReportAsserts_TrackedAssert proto.InternalMessageInfo

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetLineNumber() uint32 {
	if m != nil && m.LineNumber != nil {
		return *m.LineNumber
	}
	return 0
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleMsg() string {
	if m != nil && m.SampleMsg != nil {
		return *m.SampleMsg
	}
	return ""
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleStack() string {
	if m != nil && m.SampleStack != nil {
		return *m.SampleStack
	}
	return ""
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetTimesFired() uint32 {
	if m != nil && m.TimesFired != nil {
		return *m.TimesFired
	}
	return 0
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetFunctionName() string {
	if m != nil && m.FunctionName != nil {
		return *m.FunctionName
	}
	return ""
}

func (m *CMsgAnyToGCReportAsserts_TrackedAssert) GetCondition() string {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return ""
}

type CMsgAnyToGCReportAssertsResponse struct {
	Success              *bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgAnyToGCReportAssertsResponse) Reset()         { *m = CMsgAnyToGCReportAssertsResponse{} }
func (m *CMsgAnyToGCReportAssertsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgAnyToGCReportAssertsResponse) ProtoMessage()    {}
func (*CMsgAnyToGCReportAssertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{14}
}
func (m *CMsgAnyToGCReportAssertsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAnyToGCReportAssertsResponse.Unmarshal(m, b)
}
func (m *CMsgAnyToGCReportAssertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAnyToGCReportAssertsResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgAnyToGCReportAssertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAnyToGCReportAssertsResponse.Merge(dst, src)
}
func (m *CMsgAnyToGCReportAssertsResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgAnyToGCReportAssertsResponse.Size(m)
}
func (m *CMsgAnyToGCReportAssertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAnyToGCReportAssertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAnyToGCReportAssertsResponse proto.InternalMessageInfo

func (m *CMsgAnyToGCReportAssertsResponse) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

type CMsgGauntletConfig struct {
	GauntletId           *uint32                          `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	RandomColors         *uint32                          `protobuf:"varint,2,opt,name=random_colors,json=randomColors" json:"random_colors,omitempty"`
	MaxWins              *uint32                          `protobuf:"varint,3,opt,name=max_wins,json=maxWins" json:"max_wins,omitempty"`
	MaxLosses            *uint32                          `protobuf:"varint,4,opt,name=max_losses,json=maxLosses" json:"max_losses,omitempty"`
	MaxGames             *uint32                          `protobuf:"varint,5,opt,name=max_games,json=maxGames" json:"max_games,omitempty"`
	AttemptsTrophyId     *uint32                          `protobuf:"varint,6,opt,name=attempts_trophy_id,json=attemptsTrophyId" json:"attempts_trophy_id,omitempty"`
	Rewards              []*CMsgGauntletConfig_RewardTier `protobuf:"bytes,7,rep,name=rewards" json:"rewards,omitempty"`
	Validator            *CMsgDeckValdiationConfig        `protobuf:"bytes,8,opt,name=validator" json:"validator,omitempty"`
	PhantomLeagueId      *uint32                          `protobuf:"varint,9,opt,name=phantom_league_id,json=phantomLeagueId" json:"phantom_league_id,omitempty"`
	RegisterDeck         *bool                            `protobuf:"varint,10,opt,name=register_deck,json=registerDeck" json:"register_deck,omitempty"`
	GrantStages          *uint32                          `protobuf:"varint,11,opt,name=grant_stages,json=grantStages" json:"grant_stages,omitempty"`
	AutoPopulateDeck     *bool                            `protobuf:"varint,12,opt,name=auto_populate_deck,json=autoPopulateDeck" json:"auto_populate_deck,omitempty"`
	GrantStageInfo       []*CMsgGauntletConfig_GrantStage `protobuf:"bytes,13,rep,name=grant_stage_info,json=grantStageInfo" json:"grant_stage_info,omitempty"`
	CanModifyDeck        *bool                            `protobuf:"varint,14,opt,name=can_modify_deck,json=canModifyDeck" json:"can_modify_deck,omitempty"`
	IsActive             *bool                            `protobuf:"varint,15,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	StartingCurrency     *uint32                          `protobuf:"varint,16,opt,name=starting_currency,json=startingCurrency" json:"starting_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMsgGauntletConfig) Reset()         { *m = CMsgGauntletConfig{} }
func (m *CMsgGauntletConfig) String() string { return proto.CompactTextString(m) }
func (*CMsgGauntletConfig) ProtoMessage()    {}
func (*CMsgGauntletConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{15}
}
func (m *CMsgGauntletConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGauntletConfig.Unmarshal(m, b)
}
func (m *CMsgGauntletConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGauntletConfig.Marshal(b, m, deterministic)
}
func (dst *CMsgGauntletConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGauntletConfig.Merge(dst, src)
}
func (m *CMsgGauntletConfig) XXX_Size() int {
	return xxx_messageInfo_CMsgGauntletConfig.Size(m)
}
func (m *CMsgGauntletConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGauntletConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGauntletConfig proto.InternalMessageInfo

func (m *CMsgGauntletConfig) GetGauntletId() uint32 {
	if m != nil && m.GauntletId != nil {
		return *m.GauntletId
	}
	return 0
}

func (m *CMsgGauntletConfig) GetRandomColors() uint32 {
	if m != nil && m.RandomColors != nil {
		return *m.RandomColors
	}
	return 0
}

func (m *CMsgGauntletConfig) GetMaxWins() uint32 {
	if m != nil && m.MaxWins != nil {
		return *m.MaxWins
	}
	return 0
}

func (m *CMsgGauntletConfig) GetMaxLosses() uint32 {
	if m != nil && m.MaxLosses != nil {
		return *m.MaxLosses
	}
	return 0
}

func (m *CMsgGauntletConfig) GetMaxGames() uint32 {
	if m != nil && m.MaxGames != nil {
		return *m.MaxGames
	}
	return 0
}

func (m *CMsgGauntletConfig) GetAttemptsTrophyId() uint32 {
	if m != nil && m.AttemptsTrophyId != nil {
		return *m.AttemptsTrophyId
	}
	return 0
}

func (m *CMsgGauntletConfig) GetRewards() []*CMsgGauntletConfig_RewardTier {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *CMsgGauntletConfig) GetValidator() *CMsgDeckValdiationConfig {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *CMsgGauntletConfig) GetPhantomLeagueId() uint32 {
	if m != nil && m.PhantomLeagueId != nil {
		return *m.PhantomLeagueId
	}
	return 0
}

func (m *CMsgGauntletConfig) GetRegisterDeck() bool {
	if m != nil && m.RegisterDeck != nil {
		return *m.RegisterDeck
	}
	return false
}

func (m *CMsgGauntletConfig) GetGrantStages() uint32 {
	if m != nil && m.GrantStages != nil {
		return *m.GrantStages
	}
	return 0
}

func (m *CMsgGauntletConfig) GetAutoPopulateDeck() bool {
	if m != nil && m.AutoPopulateDeck != nil {
		return *m.AutoPopulateDeck
	}
	return false
}

func (m *CMsgGauntletConfig) GetGrantStageInfo() []*CMsgGauntletConfig_GrantStage {
	if m != nil {
		return m.GrantStageInfo
	}
	return nil
}

func (m *CMsgGauntletConfig) GetCanModifyDeck() bool {
	if m != nil && m.CanModifyDeck != nil {
		return *m.CanModifyDeck
	}
	return false
}

func (m *CMsgGauntletConfig) GetIsActive() bool {
	if m != nil && m.IsActive != nil {
		return *m.IsActive
	}
	return false
}

func (m *CMsgGauntletConfig) GetStartingCurrency() uint32 {
	if m != nil && m.StartingCurrency != nil {
		return *m.StartingCurrency
	}
	return 0
}

type CMsgGauntletConfig_RewardTier struct {
	TrophyGrant          []*CMsgGauntletConfig_RewardTier_Grant `protobuf:"bytes,1,rep,name=trophy_grant,json=trophyGrant" json:"trophy_grant,omitempty"`
	ItemGrant            []*CMsgGauntletConfig_RewardTier_Grant `protobuf:"bytes,2,rep,name=item_grant,json=itemGrant" json:"item_grant,omitempty"`
	MinWins              *uint32                                `protobuf:"varint,3,opt,name=min_wins,json=minWins" json:"min_wins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CMsgGauntletConfig_RewardTier) Reset()         { *m = CMsgGauntletConfig_RewardTier{} }
func (m *CMsgGauntletConfig_RewardTier) String() string { return proto.CompactTextString(m) }
func (*CMsgGauntletConfig_RewardTier) ProtoMessage()    {}
func (*CMsgGauntletConfig_RewardTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{15, 0}
}
func (m *CMsgGauntletConfig_RewardTier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier.Unmarshal(m, b)
}
func (m *CMsgGauntletConfig_RewardTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier.Marshal(b, m, deterministic)
}
func (dst *CMsgGauntletConfig_RewardTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGauntletConfig_RewardTier.Merge(dst, src)
}
func (m *CMsgGauntletConfig_RewardTier) XXX_Size() int {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier.Size(m)
}
func (m *CMsgGauntletConfig_RewardTier) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGauntletConfig_RewardTier.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGauntletConfig_RewardTier proto.InternalMessageInfo

func (m *CMsgGauntletConfig_RewardTier) GetTrophyGrant() []*CMsgGauntletConfig_RewardTier_Grant {
	if m != nil {
		return m.TrophyGrant
	}
	return nil
}

func (m *CMsgGauntletConfig_RewardTier) GetItemGrant() []*CMsgGauntletConfig_RewardTier_Grant {
	if m != nil {
		return m.ItemGrant
	}
	return nil
}

func (m *CMsgGauntletConfig_RewardTier) GetMinWins() uint32 {
	if m != nil && m.MinWins != nil {
		return *m.MinWins
	}
	return 0
}

type CMsgGauntletConfig_RewardTier_Grant struct {
	GrantId              *uint32  `protobuf:"varint,1,opt,name=grant_id,json=grantId" json:"grant_id,omitempty"`
	Quantity             *uint32  `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGauntletConfig_RewardTier_Grant) Reset()         { *m = CMsgGauntletConfig_RewardTier_Grant{} }
func (m *CMsgGauntletConfig_RewardTier_Grant) String() string { return proto.CompactTextString(m) }
func (*CMsgGauntletConfig_RewardTier_Grant) ProtoMessage()    {}
func (*CMsgGauntletConfig_RewardTier_Grant) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{15, 0, 0}
}
func (m *CMsgGauntletConfig_RewardTier_Grant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant.Unmarshal(m, b)
}
func (m *CMsgGauntletConfig_RewardTier_Grant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant.Marshal(b, m, deterministic)
}
func (dst *CMsgGauntletConfig_RewardTier_Grant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant.Merge(dst, src)
}
func (m *CMsgGauntletConfig_RewardTier_Grant) XXX_Size() int {
	return xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant.Size(m)
}
func (m *CMsgGauntletConfig_RewardTier_Grant) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGauntletConfig_RewardTier_Grant proto.InternalMessageInfo

func (m *CMsgGauntletConfig_RewardTier_Grant) GetGrantId() uint32 {
	if m != nil && m.GrantId != nil {
		return *m.GrantId
	}
	return 0
}

func (m *CMsgGauntletConfig_RewardTier_Grant) GetQuantity() uint32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type CMsgGauntletConfig_GrantStage struct {
	GrantType            *CMsgGauntletConfig_EGrantType `protobuf:"varint,1,opt,name=grant_type,json=grantType,enum=CMsgGauntletConfig_EGrantType,def=0" json:"grant_type,omitempty"`
	GrantCount           *uint32                        `protobuf:"varint,2,opt,name=grant_count,json=grantCount" json:"grant_count,omitempty"`
	RepeatCount          *uint32                        `protobuf:"varint,3,opt,name=repeat_count,json=repeatCount" json:"repeat_count,omitempty"`
	DisplayMsg           *string                        `protobuf:"bytes,4,opt,name=display_msg,json=displayMsg" json:"display_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CMsgGauntletConfig_GrantStage) Reset()         { *m = CMsgGauntletConfig_GrantStage{} }
func (m *CMsgGauntletConfig_GrantStage) String() string { return proto.CompactTextString(m) }
func (*CMsgGauntletConfig_GrantStage) ProtoMessage()    {}
func (*CMsgGauntletConfig_GrantStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{15, 1}
}
func (m *CMsgGauntletConfig_GrantStage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGauntletConfig_GrantStage.Unmarshal(m, b)
}
func (m *CMsgGauntletConfig_GrantStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGauntletConfig_GrantStage.Marshal(b, m, deterministic)
}
func (dst *CMsgGauntletConfig_GrantStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGauntletConfig_GrantStage.Merge(dst, src)
}
func (m *CMsgGauntletConfig_GrantStage) XXX_Size() int {
	return xxx_messageInfo_CMsgGauntletConfig_GrantStage.Size(m)
}
func (m *CMsgGauntletConfig_GrantStage) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGauntletConfig_GrantStage.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGauntletConfig_GrantStage proto.InternalMessageInfo

const Default_CMsgGauntletConfig_GrantStage_GrantType CMsgGauntletConfig_EGrantType = CMsgGauntletConfig_kGrant_Unknown

func (m *CMsgGauntletConfig_GrantStage) GetGrantType() CMsgGauntletConfig_EGrantType {
	if m != nil && m.GrantType != nil {
		return *m.GrantType
	}
	return Default_CMsgGauntletConfig_GrantStage_GrantType
}

func (m *CMsgGauntletConfig_GrantStage) GetGrantCount() uint32 {
	if m != nil && m.GrantCount != nil {
		return *m.GrantCount
	}
	return 0
}

func (m *CMsgGauntletConfig_GrantStage) GetRepeatCount() uint32 {
	if m != nil && m.RepeatCount != nil {
		return *m.RepeatCount
	}
	return 0
}

func (m *CMsgGauntletConfig_GrantStage) GetDisplayMsg() string {
	if m != nil && m.DisplayMsg != nil {
		return *m.DisplayMsg
	}
	return ""
}

type CSODCGPrivateLobby struct {
	PrivateLobbyId       *uint64                          `protobuf:"varint,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	Members              []*CSODCGPrivateLobby_Member     `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Invites              []*CSODCGPrivateLobby_Invite     `protobuf:"bytes,3,rep,name=invites" json:"invites,omitempty"`
	ExtraMessages        []*CExtraMsgBlock                `protobuf:"bytes,4,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	InMatchMaking        *bool                            `protobuf:"varint,5,opt,name=in_match_making,json=inMatchMaking" json:"in_match_making,omitempty"`
	ServerSearchKey      *string                          `protobuf:"bytes,6,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	AreDecksVisible      *bool                            `protobuf:"varint,7,opt,name=are_decks_visible,json=areDecksVisible" json:"are_decks_visible,omitempty"`
	MatchList            []*CSODCGPrivateLobby_Match      `protobuf:"bytes,8,rep,name=match_list,json=matchList" json:"match_list,omitempty"`
	TimerMode            *EDCGLobbyTimer                  `protobuf:"varint,9,opt,name=timer_mode,json=timerMode,enum=EDCGLobbyTimer,def=0" json:"timer_mode,omitempty"`
	MatchLobbyId         *uint64                          `protobuf:"fixed64,10,opt,name=match_lobby_id,json=matchLobbyId" json:"match_lobby_id,omitempty"`
	SharedDecks          []*CSODCGPrivateLobby_SharedDeck `protobuf:"bytes,11,rep,name=shared_decks,json=sharedDecks" json:"shared_decks,omitempty"`
	DeckValidator        *CMsgDeckValdiationConfig        `protobuf:"bytes,12,opt,name=deck_validator,json=deckValidator" json:"deck_validator,omitempty"`
	RandomColors         *uint32                          `protobuf:"varint,13,opt,name=random_colors,json=randomColors" json:"random_colors,omitempty"`
	GameMode             *EDCGPrivateLobbyMode            `protobuf:"varint,14,opt,name=game_mode,json=gameMode,enum=EDCGPrivateLobbyMode,def=0" json:"game_mode,omitempty"`
	MinClientVersion     *uint32                          `protobuf:"varint,15,opt,name=min_client_version,json=minClientVersion" json:"min_client_version,omitempty"`
	MaxClientVersion     *uint32                          `protobuf:"varint,16,opt,name=max_client_version,json=maxClientVersion" json:"max_client_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CSODCGPrivateLobby) Reset()         { *m = CSODCGPrivateLobby{} }
func (m *CSODCGPrivateLobby) String() string { return proto.CompactTextString(m) }
func (*CSODCGPrivateLobby) ProtoMessage()    {}
func (*CSODCGPrivateLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{16}
}
func (m *CSODCGPrivateLobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPrivateLobby.Unmarshal(m, b)
}
func (m *CSODCGPrivateLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPrivateLobby.Marshal(b, m, deterministic)
}
func (dst *CSODCGPrivateLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPrivateLobby.Merge(dst, src)
}
func (m *CSODCGPrivateLobby) XXX_Size() int {
	return xxx_messageInfo_CSODCGPrivateLobby.Size(m)
}
func (m *CSODCGPrivateLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPrivateLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPrivateLobby proto.InternalMessageInfo

const Default_CSODCGPrivateLobby_TimerMode EDCGLobbyTimer = EDCGLobbyTimer_k_eDCGLobbyTimer_Unspecified
const Default_CSODCGPrivateLobby_GameMode EDCGPrivateLobbyMode = EDCGPrivateLobbyMode_k_eDCGPrivateLobbyMode_Standard

func (m *CSODCGPrivateLobby) GetPrivateLobbyId() uint64 {
	if m != nil && m.PrivateLobbyId != nil {
		return *m.PrivateLobbyId
	}
	return 0
}

func (m *CSODCGPrivateLobby) GetMembers() []*CSODCGPrivateLobby_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetInvites() []*CSODCGPrivateLobby_Invite {
	if m != nil {
		return m.Invites
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetExtraMessages() []*CExtraMsgBlock {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetInMatchMaking() bool {
	if m != nil && m.InMatchMaking != nil {
		return *m.InMatchMaking
	}
	return false
}

func (m *CSODCGPrivateLobby) GetServerSearchKey() string {
	if m != nil && m.ServerSearchKey != nil {
		return *m.ServerSearchKey
	}
	return ""
}

func (m *CSODCGPrivateLobby) GetAreDecksVisible() bool {
	if m != nil && m.AreDecksVisible != nil {
		return *m.AreDecksVisible
	}
	return false
}

func (m *CSODCGPrivateLobby) GetMatchList() []*CSODCGPrivateLobby_Match {
	if m != nil {
		return m.MatchList
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetTimerMode() EDCGLobbyTimer {
	if m != nil && m.TimerMode != nil {
		return *m.TimerMode
	}
	return Default_CSODCGPrivateLobby_TimerMode
}

func (m *CSODCGPrivateLobby) GetMatchLobbyId() uint64 {
	if m != nil && m.MatchLobbyId != nil {
		return *m.MatchLobbyId
	}
	return 0
}

func (m *CSODCGPrivateLobby) GetSharedDecks() []*CSODCGPrivateLobby_SharedDeck {
	if m != nil {
		return m.SharedDecks
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetDeckValidator() *CMsgDeckValdiationConfig {
	if m != nil {
		return m.DeckValidator
	}
	return nil
}

func (m *CSODCGPrivateLobby) GetRandomColors() uint32 {
	if m != nil && m.RandomColors != nil {
		return *m.RandomColors
	}
	return 0
}

func (m *CSODCGPrivateLobby) GetGameMode() EDCGPrivateLobbyMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CSODCGPrivateLobby_GameMode
}

func (m *CSODCGPrivateLobby) GetMinClientVersion() uint32 {
	if m != nil && m.MinClientVersion != nil {
		return *m.MinClientVersion
	}
	return 0
}

func (m *CSODCGPrivateLobby) GetMaxClientVersion() uint32 {
	if m != nil && m.MaxClientVersion != nil {
		return *m.MaxClientVersion
	}
	return 0
}

type CSODCGPrivateLobby_Member struct {
	AccountId            *uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName          *string        `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team                 *EDCGLobbyTeam `protobuf:"varint,3,opt,name=team,enum=EDCGLobbyTeam,def=0" json:"team,omitempty"`
	DeckBytes            []byte         `protobuf:"bytes,5,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	HasDeck              *bool          `protobuf:"varint,7,opt,name=has_deck,json=hasDeck" json:"has_deck,omitempty"`
	ClientVersion        *uint32        `protobuf:"varint,8,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CSODCGPrivateLobby_Member) Reset()         { *m = CSODCGPrivateLobby_Member{} }
func (m *CSODCGPrivateLobby_Member) String() string { return proto.CompactTextString(m) }
func (*CSODCGPrivateLobby_Member) ProtoMessage()    {}
func (*CSODCGPrivateLobby_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{16, 0}
}
func (m *CSODCGPrivateLobby_Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPrivateLobby_Member.Unmarshal(m, b)
}
func (m *CSODCGPrivateLobby_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPrivateLobby_Member.Marshal(b, m, deterministic)
}
func (dst *CSODCGPrivateLobby_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPrivateLobby_Member.Merge(dst, src)
}
func (m *CSODCGPrivateLobby_Member) XXX_Size() int {
	return xxx_messageInfo_CSODCGPrivateLobby_Member.Size(m)
}
func (m *CSODCGPrivateLobby_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPrivateLobby_Member.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPrivateLobby_Member proto.InternalMessageInfo

const Default_CSODCGPrivateLobby_Member_Team EDCGLobbyTeam = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0

func (m *CSODCGPrivateLobby_Member) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODCGPrivateLobby_Member) GetPersonaName() string {
	if m != nil && m.PersonaName != nil {
		return *m.PersonaName
	}
	return ""
}

func (m *CSODCGPrivateLobby_Member) GetTeam() EDCGLobbyTeam {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CSODCGPrivateLobby_Member_Team
}

func (m *CSODCGPrivateLobby_Member) GetDeckBytes() []byte {
	if m != nil {
		return m.DeckBytes
	}
	return nil
}

func (m *CSODCGPrivateLobby_Member) GetHasDeck() bool {
	if m != nil && m.HasDeck != nil {
		return *m.HasDeck
	}
	return false
}

func (m *CSODCGPrivateLobby_Member) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

type CSODCGPrivateLobby_Invite struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName          *string  `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	InvitedBy            *uint32  `protobuf:"varint,3,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODCGPrivateLobby_Invite) Reset()         { *m = CSODCGPrivateLobby_Invite{} }
func (m *CSODCGPrivateLobby_Invite) String() string { return proto.CompactTextString(m) }
func (*CSODCGPrivateLobby_Invite) ProtoMessage()    {}
func (*CSODCGPrivateLobby_Invite) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{16, 1}
}
func (m *CSODCGPrivateLobby_Invite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPrivateLobby_Invite.Unmarshal(m, b)
}
func (m *CSODCGPrivateLobby_Invite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPrivateLobby_Invite.Marshal(b, m, deterministic)
}
func (dst *CSODCGPrivateLobby_Invite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPrivateLobby_Invite.Merge(dst, src)
}
func (m *CSODCGPrivateLobby_Invite) XXX_Size() int {
	return xxx_messageInfo_CSODCGPrivateLobby_Invite.Size(m)
}
func (m *CSODCGPrivateLobby_Invite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPrivateLobby_Invite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPrivateLobby_Invite proto.InternalMessageInfo

func (m *CSODCGPrivateLobby_Invite) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODCGPrivateLobby_Invite) GetPersonaName() string {
	if m != nil && m.PersonaName != nil {
		return *m.PersonaName
	}
	return ""
}

func (m *CSODCGPrivateLobby_Invite) GetInvitedBy() uint32 {
	if m != nil && m.InvitedBy != nil {
		return *m.InvitedBy
	}
	return 0
}

type CSODCGPrivateLobby_SharedDeck struct {
	SharedByAccountId    *uint32  `protobuf:"varint,1,opt,name=shared_by_account_id,json=sharedByAccountId" json:"shared_by_account_id,omitempty"`
	DeckBytes            []byte   `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	DeckName             *string  `protobuf:"bytes,3,opt,name=deck_name,json=deckName" json:"deck_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODCGPrivateLobby_SharedDeck) Reset()         { *m = CSODCGPrivateLobby_SharedDeck{} }
func (m *CSODCGPrivateLobby_SharedDeck) String() string { return proto.CompactTextString(m) }
func (*CSODCGPrivateLobby_SharedDeck) ProtoMessage()    {}
func (*CSODCGPrivateLobby_SharedDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{16, 2}
}
func (m *CSODCGPrivateLobby_SharedDeck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPrivateLobby_SharedDeck.Unmarshal(m, b)
}
func (m *CSODCGPrivateLobby_SharedDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPrivateLobby_SharedDeck.Marshal(b, m, deterministic)
}
func (dst *CSODCGPrivateLobby_SharedDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPrivateLobby_SharedDeck.Merge(dst, src)
}
func (m *CSODCGPrivateLobby_SharedDeck) XXX_Size() int {
	return xxx_messageInfo_CSODCGPrivateLobby_SharedDeck.Size(m)
}
func (m *CSODCGPrivateLobby_SharedDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPrivateLobby_SharedDeck.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPrivateLobby_SharedDeck proto.InternalMessageInfo

func (m *CSODCGPrivateLobby_SharedDeck) GetSharedByAccountId() uint32 {
	if m != nil && m.SharedByAccountId != nil {
		return *m.SharedByAccountId
	}
	return 0
}

func (m *CSODCGPrivateLobby_SharedDeck) GetDeckBytes() []byte {
	if m != nil {
		return m.DeckBytes
	}
	return nil
}

func (m *CSODCGPrivateLobby_SharedDeck) GetDeckName() string {
	if m != nil && m.DeckName != nil {
		return *m.DeckName
	}
	return ""
}

type CSODCGPrivateLobby_Match struct {
	MatchId              *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	WinningAccountId     *uint32  `protobuf:"varint,2,opt,name=winning_account_id,json=winningAccountId" json:"winning_account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODCGPrivateLobby_Match) Reset()         { *m = CSODCGPrivateLobby_Match{} }
func (m *CSODCGPrivateLobby_Match) String() string { return proto.CompactTextString(m) }
func (*CSODCGPrivateLobby_Match) ProtoMessage()    {}
func (*CSODCGPrivateLobby_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad, []int{16, 3}
}
func (m *CSODCGPrivateLobby_Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODCGPrivateLobby_Match.Unmarshal(m, b)
}
func (m *CSODCGPrivateLobby_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODCGPrivateLobby_Match.Marshal(b, m, deterministic)
}
func (dst *CSODCGPrivateLobby_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODCGPrivateLobby_Match.Merge(dst, src)
}
func (m *CSODCGPrivateLobby_Match) XXX_Size() int {
	return xxx_messageInfo_CSODCGPrivateLobby_Match.Size(m)
}
func (m *CSODCGPrivateLobby_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODCGPrivateLobby_Match.DiscardUnknown(m)
}

var xxx_messageInfo_CSODCGPrivateLobby_Match proto.InternalMessageInfo

func (m *CSODCGPrivateLobby_Match) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODCGPrivateLobby_Match) GetWinningAccountId() uint32 {
	if m != nil && m.WinningAccountId != nil {
		return *m.WinningAccountId
	}
	return 0
}

func init() {
	proto.RegisterType((*CExtraMsgBlock)(nil), "CExtraMsgBlock")
	proto.RegisterType((*CSODCGLobby)(nil), "CSODCGLobby")
	proto.RegisterType((*CSODCGLobby_Member)(nil), "CSODCGLobby.Member")
	proto.RegisterType((*CLobbyData_PostMatchSurvey)(nil), "CLobbyData_PostMatchSurvey")
	proto.RegisterType((*CLobbyData_PostMatchSurvey_PlayerSurvey)(nil), "CLobbyData_PostMatchSurvey.PlayerSurvey")
	proto.RegisterType((*CSOGameAccountClient)(nil), "CSOGameAccountClient")
	proto.RegisterType((*CSOGauntlet)(nil), "CSOGauntlet")
	proto.RegisterType((*CSOGauntlet_Match)(nil), "CSOGauntlet.Match")
	proto.RegisterType((*CSOPhantomItem)(nil), "CSOPhantomItem")
	proto.RegisterType((*CSOCardAchievement)(nil), "CSOCardAchievement")
	proto.RegisterType((*CSOLeagueMembership)(nil), "CSOLeagueMembership")
	proto.RegisterType((*CMsgStartFindingMatchInfo)(nil), "CMsgStartFindingMatchInfo")
	proto.RegisterType((*CSODCGPlayerCurrency)(nil), "CSODCGPlayerCurrency")
	proto.RegisterType((*CSODCGPlayerRating)(nil), "CSODCGPlayerRating")
	proto.RegisterType((*CMsgDCGCombatLogEntry)(nil), "CMsgDCGCombatLogEntry")
	proto.RegisterType((*CMsgDeckValdiationConfig)(nil), "CMsgDeckValdiationConfig")
	proto.RegisterType((*CMsgDeckValdiationConfig_CardLimit)(nil), "CMsgDeckValdiationConfig.CardLimit")
	proto.RegisterType((*CMsgAnyToGCReportAsserts)(nil), "CMsgAnyToGCReportAsserts")
	proto.RegisterType((*CMsgAnyToGCReportAsserts_TrackedAssert)(nil), "CMsgAnyToGCReportAsserts.TrackedAssert")
	proto.RegisterType((*CMsgAnyToGCReportAssertsResponse)(nil), "CMsgAnyToGCReportAssertsResponse")
	proto.RegisterType((*CMsgGauntletConfig)(nil), "CMsgGauntletConfig")
	proto.RegisterType((*CMsgGauntletConfig_RewardTier)(nil), "CMsgGauntletConfig.RewardTier")
	proto.RegisterType((*CMsgGauntletConfig_RewardTier_Grant)(nil), "CMsgGauntletConfig.RewardTier.Grant")
	proto.RegisterType((*CMsgGauntletConfig_GrantStage)(nil), "CMsgGauntletConfig.GrantStage")
	proto.RegisterType((*CSODCGPrivateLobby)(nil), "CSODCGPrivateLobby")
	proto.RegisterType((*CSODCGPrivateLobby_Member)(nil), "CSODCGPrivateLobby.Member")
	proto.RegisterType((*CSODCGPrivateLobby_Invite)(nil), "CSODCGPrivateLobby.Invite")
	proto.RegisterType((*CSODCGPrivateLobby_SharedDeck)(nil), "CSODCGPrivateLobby.SharedDeck")
	proto.RegisterType((*CSODCGPrivateLobby_Match)(nil), "CSODCGPrivateLobby.Match")
	proto.RegisterEnum("EGCDCGCommonMessages", EGCDCGCommonMessages_name, EGCDCGCommonMessages_value)
	proto.RegisterEnum("EDCGMatchMode", EDCGMatchMode_name, EDCGMatchMode_value)
	proto.RegisterEnum("EDCGLobbyTeam", EDCGLobbyTeam_name, EDCGLobbyTeam_value)
	proto.RegisterEnum("EDCGLobbyTimer", EDCGLobbyTimer_name, EDCGLobbyTimer_value)
	proto.RegisterEnum("EDCGPrivateLobbyMode", EDCGPrivateLobbyMode_name, EDCGPrivateLobbyMode_value)
	proto.RegisterEnum("ELobbyServerState", ELobbyServerState_name, ELobbyServerState_value)
	proto.RegisterEnum("EGCLobbyData", EGCLobbyData_name, EGCLobbyData_value)
	proto.RegisterEnum("DCG_COMBATLOG_TYPES", DCG_COMBATLOG_TYPES_name, DCG_COMBATLOG_TYPES_value)
	proto.RegisterEnum("CSOGameAccountClient_EFlags", CSOGameAccountClient_EFlags_name, CSOGameAccountClient_EFlags_value)
	proto.RegisterEnum("CSOGauntlet_EMatchStatus", CSOGauntlet_EMatchStatus_name, CSOGauntlet_EMatchStatus_value)
	proto.RegisterEnum("CMsgDeckValdiationConfig_ERarity", CMsgDeckValdiationConfig_ERarity_name, CMsgDeckValdiationConfig_ERarity_value)
	proto.RegisterEnum("CMsgGauntletConfig_EGrantType", CMsgGauntletConfig_EGrantType_name, CMsgGauntletConfig_EGrantType_value)
}

func init() {
	proto.RegisterFile("dcg_gcmessages_common.proto", fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad)
}

var fileDescriptor_dcg_gcmessages_common_2823baad0c5031ad = []byte{
	// 3867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x73, 0x23, 0x49,
	0x56, 0xef, 0xf2, 0x97, 0xac, 0xd4, 0x87, 0xd3, 0xd9, 0xee, 0x6e, 0xb5, 0x66, 0x7a, 0xda, 0xad,
	0xd9, 0x99, 0x71, 0x78, 0x06, 0xef, 0x4c, 0x33, 0x0c, 0x4b, 0x07, 0x01, 0xc8, 0x92, 0x5a, 0x5d,
	0xac, 0x64, 0x7b, 0x4b, 0xee, 0x9e, 0x98, 0x53, 0x92, 0xae, 0x4a, 0xcb, 0x85, 0xea, 0x43, 0x53,
	0x59, 0x72, 0x5b, 0x7b, 0xda, 0x0b, 0x27, 0x38, 0x6c, 0x10, 0x10, 0xc1, 0x91, 0x13, 0x67, 0xb8,
	0x70, 0x22, 0x02, 0xfe, 0x00, 0x2e, 0xdc, 0xe0, 0xc4, 0x8d, 0x13, 0x44, 0x10, 0x44, 0xec, 0x19,
	0xe2, 0xbd, 0xcc, 0xd2, 0xb7, 0xb6, 0x1b, 0x82, 0xc3, 0xce, 0x61, 0x5a, 0xf9, 0x7b, 0x2f, 0xbf,
	0x5e, 0xbe, 0xf7, 0x7b, 0x2f, 0xb3, 0x4c, 0x3e, 0xf0, 0xdc, 0x3e, 0xef, 0xbb, 0xa1, 0x54, 0x4a,
	0xf4, 0xa5, 0xe2, 0x6e, 0x1c, 0x86, 0x71, 0x74, 0x32, 0x4c, 0xe2, 0x34, 0xae, 0xde, 0x57, 0xa9,
	0x14, 0x61, 0x26, 0xd3, 0x60, 0xed, 0x8f, 0x2c, 0x52, 0x6e, 0xb4, 0xee, 0xd2, 0x44, 0x74, 0x55,
	0xff, 0x34, 0x88, 0xdd, 0x01, 0x7b, 0x4c, 0x76, 0x43, 0xd5, 0xe7, 0xe9, 0x78, 0x28, 0x2b, 0xd6,
	0xa1, 0x75, 0x54, 0x72, 0x72, 0xa1, 0xea, 0x5f, 0x8e, 0x87, 0x92, 0x55, 0xc9, 0xae, 0x1b, 0x47,
	0xa9, 0x8c, 0x52, 0x55, 0xd9, 0x38, 0xb4, 0x8e, 0x8a, 0xce, 0xa4, 0xcd, 0x1e, 0x11, 0x50, 0xe3,
	0x03, 0x39, 0xae, 0x6c, 0x1e, 0x5a, 0x47, 0x5b, 0xce, 0x4e, 0xa8, 0xfa, 0x3f, 0x96, 0x63, 0xf6,
	0x31, 0x29, 0xf9, 0xb8, 0x94, 0x61, 0x22, 0x95, 0x92, 0x5e, 0x65, 0xeb, 0xd0, 0x3a, 0xda, 0x75,
	0x8a, 0xbe, 0x6a, 0x4c, 0xb0, 0xda, 0x2f, 0xb6, 0x49, 0xa1, 0xd1, 0x3b, 0x6f, 0x36, 0xda, 0x9d,
	0xf8, 0xea, 0x6a, 0xcc, 0x7e, 0x8d, 0xe4, 0x42, 0x19, 0x5e, 0xc9, 0x44, 0x55, 0xac, 0xc3, 0xcd,
	0xa3, 0xc2, 0xf3, 0xfb, 0x27, 0x33, 0xe2, 0x93, 0x2e, 0xca, 0x9c, 0x4c, 0x87, 0x7d, 0x43, 0xca,
	0x12, 0x36, 0xc1, 0xb3, 0xed, 0x55, 0x36, 0xb0, 0xd7, 0xde, 0xc9, 0xfc, 0xe6, 0x9c, 0x12, 0xaa,
	0x75, 0x8d, 0x16, 0xfb, 0x94, 0xec, 0x29, 0x99, 0xdc, 0xca, 0x84, 0xa3, 0x71, 0xb8, 0xef, 0xe1,
	0xe2, 0x77, 0x9c, 0x92, 0x86, 0x7b, 0x80, 0xda, 0x1e, 0xd8, 0x24, 0x80, 0x89, 0x41, 0x61, 0x1b,
	0x77, 0x97, 0xc3, 0xb6, 0x16, 0x85, 0x22, 0x75, 0x6f, 0x40, 0xb4, 0xa3, 0x45, 0xd8, 0xb6, 0x3d,
	0xf6, 0x01, 0xc9, 0x07, 0x52, 0xf4, 0x47, 0x12, 0x64, 0x39, 0x34, 0xe5, 0xae, 0x06, 0x6c, 0x8f,
	0xfd, 0x84, 0x14, 0x27, 0x53, 0x8b, 0x54, 0x56, 0x76, 0x0f, 0xad, 0xa3, 0xf2, 0x73, 0x76, 0xd2,
	0xc2, 0x1d, 0xf6, 0xcc, 0xf4, 0x22, 0x95, 0x2f, 0xaa, 0x03, 0x2e, 0x17, 0x41, 0x5e, 0x57, 0xca,
	0xef, 0x47, 0x4e, 0x41, 0x4d, 0x31, 0xf6, 0x94, 0x14, 0x12, 0x39, 0x0c, 0xc4, 0x98, 0x2b, 0x11,
	0xa4, 0x95, 0xfc, 0xa1, 0x75, 0x94, 0x73, 0x88, 0x86, 0x7a, 0x22, 0x48, 0xd9, 0x4b, 0x42, 0xf4,
	0x5a, 0xc3, 0xd8, 0x93, 0x15, 0x82, 0x33, 0x96, 0x4f, 0x5a, 0xcd, 0x46, 0xbb, 0x0b, 0x70, 0x37,
	0xf6, 0xe4, 0x8b, 0x47, 0x03, 0x3e, 0x07, 0xf0, 0x33, 0xf9, 0xf6, 0xb5, 0x92, 0x89, 0x93, 0x0f,
	0x33, 0x88, 0xfd, 0x80, 0x94, 0x47, 0xde, 0x90, 0xbb, 0x71, 0x14, 0x49, 0x37, 0xe5, 0xfe, 0xb0,
	0x52, 0xc0, 0xdd, 0x15, 0x47, 0xde, 0xb0, 0xa1, 0x41, 0x7b, 0xc8, 0x8e, 0x08, 0x9d, 0xd5, 0x1a,
	0xc6, 0x49, 0x5a, 0x29, 0xa2, 0x5e, 0x79, 0xaa, 0x77, 0x11, 0x27, 0x29, 0xb8, 0x48, 0x1a, 0x8f,
	0x92, 0x48, 0x84, 0x32, 0x4a, 0xc1, 0x58, 0x25, 0x3d, 0xdc, 0x14, 0xb4, 0x3d, 0xf6, 0x25, 0x39,
	0x98, 0x51, 0x52, 0x32, 0xf1, 0xa5, 0x02, 0xdd, 0x32, 0xea, 0xb2, 0xa9, 0xac, 0x87, 0x22, 0xdb,
	0xab, 0xfe, 0xa5, 0x45, 0x76, 0xb4, 0xa7, 0xb0, 0x27, 0x84, 0x08, 0xd7, 0x8d, 0x47, 0x7a, 0x78,
	0xed, 0xd6, 0x79, 0x83, 0xd8, 0x1e, 0x7b, 0x46, 0x8a, 0x43, 0x99, 0xa8, 0x38, 0x12, 0x1c, 0xc6,
	0x40, 0xe7, 0xce, 0x3b, 0x05, 0x83, 0x9d, 0x89, 0x50, 0xb2, 0xdf, 0x22, 0x5b, 0xe0, 0x0c, 0xe8,
	0x1f, 0x99, 0xd5, 0xf0, 0x54, 0x2e, 0xa5, 0x08, 0x5f, 0x3c, 0xd0, 0x56, 0x9b, 0x00, 0x1c, 0xfe,
	0xf7, 0xa5, 0x83, 0x5d, 0xc0, 0x45, 0x6e, 0x84, 0xe2, 0x81, 0xbc, 0x4e, 0x8d, 0xf3, 0xe7, 0x6e,
	0x84, 0xea, 0xc8, 0xeb, 0xb4, 0xf6, 0xd7, 0x16, 0xa9, 0x36, 0xb0, 0x57, 0x53, 0xa4, 0x82, 0x5f,
	0xc4, 0x2a, 0x45, 0xcb, 0xf7, 0x46, 0xc9, 0xad, 0x1c, 0xb3, 0x53, 0x92, 0x53, 0xf8, 0x2b, 0x0b,
	0x83, 0xa3, 0x93, 0xf5, 0xda, 0x27, 0x17, 0x81, 0x18, 0xcb, 0x44, 0x37, 0x9c, 0xac, 0x63, 0xf5,
	0x8c, 0x14, 0x67, 0x05, 0xef, 0x32, 0xc5, 0x53, 0x52, 0xf8, 0x7e, 0x24, 0x55, 0xea, 0xc7, 0x11,
	0xc8, 0x37, 0x50, 0x4e, 0x32, 0xc8, 0xf6, 0x6a, 0x7f, 0x66, 0x91, 0x83, 0x46, 0xef, 0xbc, 0x2d,
	0x42, 0x59, 0xd7, 0xbd, 0x1a, 0x81, 0x2f, 0x23, 0x38, 0xc5, 0xa5, 0x81, 0x4f, 0xb7, 0x7e, 0xf6,
	0x57, 0x4f, 0xac, 0xd9, 0xe1, 0x3f, 0x21, 0xe5, 0xe1, 0x8d, 0x88, 0xd2, 0x38, 0xe4, 0x3a, 0x14,
	0xcc, 0x0c, 0x25, 0x83, 0x76, 0x10, 0x64, 0x07, 0x64, 0xfb, 0x3a, 0x10, 0x7d, 0x85, 0xe6, 0x2e,
	0x39, 0xba, 0x51, 0xab, 0x92, 0x9d, 0xd6, 0x4b, 0xf8, 0xc5, 0x28, 0x29, 0x0e, 0xb8, 0x6c, 0xca,
	0x5b, 0x19, 0xc4, 0x43, 0x99, 0x50, 0xab, 0xf6, 0xb7, 0x5b, 0xc8, 0x20, 0x6d, 0x31, 0x8a, 0xd2,
	0x40, 0xbe, 0xf7, 0x6a, 0x0a, 0x7d, 0xd3, 0x61, 0xb2, 0x59, 0xa3, 0x45, 0x32, 0x81, 0xed, 0x01,
	0x4d, 0x08, 0x37, 0xf5, 0x6f, 0x25, 0x9f, 0xb0, 0x80, 0xe6, 0xb8, 0x92, 0x86, 0x3b, 0x86, 0x0b,
	0x3e, 0x21, 0x65, 0x71, 0x25, 0x22, 0x2f, 0x8e, 0xa4, 0xc7, 0x53, 0x3f, 0x94, 0x78, 0xdc, 0x25,
	0xa7, 0x34, 0x41, 0x2f, 0xfd, 0x50, 0x02, 0x2f, 0x78, 0xd2, 0x1d, 0x70, 0x17, 0xa2, 0x70, 0x5b,
	0xf3, 0x28, 0x00, 0x0d, 0x88, 0xad, 0x8f, 0x49, 0x29, 0x11, 0xd1, 0xc0, 0x8f, 0xfa, 0x5c, 0xb9,
	0x71, 0x22, 0x91, 0x54, 0x4a, 0x4e, 0xd1, 0x80, 0x3d, 0xc0, 0xd8, 0x57, 0x59, 0x20, 0x07, 0xbe,
	0x4a, 0x2b, 0x39, 0x74, 0x0d, 0x76, 0x32, 0xb3, 0xfd, 0x13, 0xf4, 0x0b, 0x13, 0xb3, 0x1d, 0x5f,
	0xa5, 0x70, 0xae, 0xfd, 0x44, 0x40, 0xe4, 0xa4, 0xa2, 0xaf, 0xe9, 0xa6, 0xe4, 0x10, 0x84, 0x7a,
	0x80, 0x54, 0x6f, 0xc8, 0x36, 0x76, 0x62, 0x4d, 0xb2, 0x03, 0x94, 0x34, 0x52, 0x68, 0xb5, 0xf2,
	0xf3, 0xc7, 0x73, 0x03, 0xb7, 0xb4, 0xc7, 0xa1, 0xc2, 0x8b, 0xfd, 0x01, 0x97, 0xfa, 0xe7, 0xeb,
	0x08, 0x58, 0x46, 0x7a, 0x8e, 0xe9, 0x3b, 0xc7, 0x8b, 0x1b, 0x73, 0xbc, 0x58, 0xfb, 0x63, 0x8b,
	0x14, 0x67, 0x87, 0x61, 0x0f, 0xc8, 0xf2, 0x40, 0xf4, 0x1e, 0xdb, 0x27, 0xa5, 0x09, 0xdc, 0x89,
	0x95, 0xa2, 0x96, 0x39, 0x77, 0x0d, 0x7d, 0xeb, 0x47, 0x74, 0x63, 0x0e, 0xb9, 0xf4, 0x25, 0xdd,
	0x64, 0x8f, 0xc9, 0x83, 0x09, 0xd2, 0xf4, 0xd5, 0xf7, 0x23, 0x11, 0xf8, 0xd7, 0xbe, 0xf4, 0xe8,
	0x16, 0x63, 0xa4, 0x3c, 0x11, 0xb5, 0x92, 0x24, 0x4e, 0xe8, 0x76, 0xed, 0x4f, 0x21, 0x05, 0xf6,
	0xce, 0x2f, 0xb4, 0xff, 0xd9, 0xa9, 0x0c, 0xdf, 0x15, 0x22, 0xef, 0xe9, 0xc3, 0x78, 0xcc, 0xd7,
	0xdc, 0x8f, 0x3c, 0x79, 0x67, 0xfc, 0x78, 0xd7, 0x93, 0xd7, 0x36, 0xb4, 0x61, 0x8a, 0x6c, 0x0c,
	0x5f, 0xa7, 0xc4, 0x2d, 0x27, 0x6f, 0x10, 0xdb, 0xab, 0xdd, 0x12, 0xd6, 0xe8, 0x9d, 0x37, 0x44,
	0xe2, 0xd5, 0xdd, 0x1b, 0x5f, 0xde, 0x4a, 0x20, 0xb6, 0xf7, 0x58, 0x97, 0x98, 0x6a, 0x4f, 0xa3,
	0xb7, 0x34, 0x83, 0xda, 0x1e, 0x64, 0xf1, 0x61, 0x12, 0xf7, 0x21, 0xf3, 0x66, 0xcb, 0xca, 0xda,
	0xb5, 0xbf, 0xb0, 0xc8, 0xfd, 0x46, 0xef, 0x5c, 0xef, 0x40, 0x73, 0xa7, 0xba, 0xf1, 0x87, 0xec,
	0xd9, 0x6c, 0x2a, 0x9b, 0x0d, 0xa6, 0x69, 0x42, 0x9b, 0x0f, 0xb8, 0x8d, 0xd5, 0x01, 0xb7, 0x32,
	0xae, 0xc1, 0xe7, 0x87, 0xc2, 0x1d, 0x28, 0x8e, 0xee, 0x68, 0x4a, 0x84, 0x92, 0x53, 0x44, 0xb0,
	0xad, 0xb1, 0xda, 0x7f, 0x5a, 0xe4, 0x71, 0xa3, 0xab, 0xfa, 0xbd, 0x54, 0x24, 0xe9, 0x4b, 0x3f,
	0xf2, 0xfc, 0xa8, 0x8f, 0x4e, 0x64, 0x47, 0xd7, 0xf1, 0x7c, 0xae, 0xb5, 0x16, 0x72, 0xed, 0x31,
	0xd9, 0xcf, 0x72, 0xad, 0x14, 0x89, 0x7b, 0x83, 0x55, 0x8a, 0xe6, 0x78, 0x93, 0xff, 0x7b, 0x88,
	0x43, 0xb9, 0xf2, 0x09, 0x29, 0xbb, 0xc8, 0x67, 0xfc, 0x56, 0x26, 0xca, 0x8f, 0x23, 0xb3, 0xd4,
	0x92, 0x46, 0xdf, 0x68, 0x70, 0x21, 0x95, 0x6e, 0xfd, 0x9f, 0x53, 0x69, 0xc6, 0x05, 0x9e, 0x48,
	0xc5, 0x2c, 0x17, 0x00, 0xc1, 0xd7, 0xfe, 0x5e, 0x53, 0x6d, 0xb3, 0xd1, 0xd6, 0x0c, 0xde, 0x18,
	0x25, 0x89, 0x8c, 0xdc, 0xf1, 0x7b, 0x93, 0x9b, 0x6b, 0x3a, 0x2c, 0x91, 0x5b, 0x26, 0xb0, 0x3d,
	0x56, 0x21, 0xb9, 0x2b, 0x11, 0x88, 0xc8, 0x95, 0x66, 0xa7, 0x59, 0x73, 0x7a, 0x58, 0x5b, 0xb3,
	0x87, 0xf5, 0x39, 0xd9, 0x4f, 0x13, 0xe1, 0x49, 0x9e, 0x48, 0x95, 0x26, 0xbe, 0x0b, 0x69, 0x01,
	0x57, 0x5e, 0x72, 0x28, 0x0a, 0x9c, 0x29, 0x5e, 0xfb, 0xd7, 0x0d, 0x74, 0xe4, 0xc9, 0x0e, 0x1c,
	0x91, 0xfa, 0x51, 0xff, 0xfd, 0xd6, 0xff, 0x8c, 0xe4, 0x13, 0x54, 0x5f, 0x5c, 0xfd, 0xae, 0x86,
	0x6d, 0x8f, 0x3d, 0x24, 0x3b, 0xfa, 0xb7, 0x59, 0xba, 0x69, 0xc1, 0x21, 0xa2, 0x89, 0xa5, 0xe2,
	0x9a, 0x4d, 0x32, 0x22, 0x36, 0x28, 0x2e, 0x06, 0x73, 0x5d, 0xa6, 0xf6, 0x76, 0xb2, 0x09, 0x62,
	0xa0, 0x6f, 0xe3, 0x88, 0x1d, 0x92, 0xa2, 0xaf, 0xf8, 0x8d, 0x4c, 0x62, 0x0e, 0xfc, 0x8b, 0x5c,
	0xbc, 0xeb, 0x10, 0x5f, 0xbd, 0x92, 0x49, 0xec, 0x88, 0x68, 0x80, 0xee, 0x82, 0xb6, 0x04, 0x62,
	0x4d, 0xa4, 0x18, 0x98, 0x42, 0xaf, 0x64, 0xd0, 0x1e, 0x82, 0x30, 0xd3, 0x95, 0x54, 0x13, 0x1d,
	0xc3, 0xbe, 0x00, 0x4d, 0x15, 0x86, 0x52, 0x0c, 0xb8, 0xd9, 0x4e, 0x5e, 0x2b, 0x00, 0x64, 0x4c,
	0xf6, 0x90, 0xec, 0x28, 0x29, 0x54, 0x1c, 0x61, 0xdd, 0x56, 0x72, 0x4c, 0xab, 0xf6, 0xf3, 0x1c,
	0x79, 0x00, 0x61, 0xd1, 0x6c, 0xb4, 0x1b, 0x71, 0x78, 0x25, 0xd2, 0x4e, 0xdc, 0x6f, 0x45, 0x69,
	0x32, 0x66, 0xbf, 0x4b, 0xb6, 0x26, 0x45, 0x7c, 0xf9, 0xf9, 0xc1, 0x49, 0xb3, 0xd1, 0xe6, 0x8d,
	0xf3, 0xee, 0x69, 0xfd, 0xb2, 0x73, 0xde, 0xe6, 0x97, 0xdf, 0x5d, 0xb4, 0x7a, 0x2f, 0x1e, 0xcc,
	0x83, 0xf6, 0xd9, 0x9b, 0x7a, 0xc7, 0x6e, 0x3a, 0xd8, 0x11, 0xca, 0xbc, 0x54, 0x24, 0x7d, 0x99,
	0x72, 0x57, 0x24, 0xde, 0x94, 0x4f, 0x8a, 0x1a, 0x05, 0x76, 0xb2, 0x3d, 0x28, 0xf3, 0x8c, 0x56,
	0x7c, 0xf5, 0x87, 0x58, 0x0e, 0x7a, 0xe6, 0x34, 0x4c, 0xef, 0x73, 0x84, 0x75, 0x95, 0x95, 0x69,
	0xbe, 0x8d, 0x64, 0x62, 0xce, 0xa4, 0x60, 0xb4, 0x00, 0x82, 0x29, 0x55, 0x3c, 0x4a, 0x5c, 0x39,
	0x99, 0x52, 0x1f, 0x4a, 0x51, 0xa3, 0xd3, 0x29, 0x8d, 0xd6, 0x74, 0x4a, 0x9d, 0x26, 0x4d, 0xef,
	0xd9, 0x29, 0x33, 0x4d, 0x9c, 0x52, 0x1f, 0x4e, 0xc1, 0x68, 0xe1, 0x94, 0x07, 0x64, 0xfb, 0x56,
	0x04, 0xa3, 0x2c, 0x25, 0xea, 0x06, 0x96, 0xa4, 0x7a, 0xad, 0x22, 0x4d, 0x85, 0x3b, 0xc0, 0x13,
	0xd9, 0xce, 0xb6, 0x5e, 0x47, 0x6c, 0x66, 0x43, 0x22, 0x09, 0xe3, 0x04, 0x4f, 0x66, 0x3b, 0xdb,
	0x50, 0x1d, 0xa0, 0x99, 0x71, 0x6e, 0xa4, 0x08, 0xd2, 0x1b, 0xac, 0x94, 0x27, 0xe3, 0xbc, 0x42,
	0x0c, 0x94, 0xcc, 0x2a, 0xcd, 0x64, 0x45, 0xad, 0xa4, 0xc1, 0xe9, 0x64, 0x99, 0x12, 0x4e, 0x56,
	0xd2, 0x93, 0x19, 0x9d, 0x6c, 0x32, 0xa3, 0x62, 0x26, 0x2b, 0xcf, 0x8e, 0x63, 0x26, 0xfb, 0x90,
	0xe4, 0xd3, 0x51, 0x12, 0xa9, 0x54, 0x84, 0xc3, 0xca, 0x9e, 0xce, 0x21, 0x13, 0x00, 0xfc, 0xd0,
	0x0c, 0x11, 0x88, 0x48, 0x56, 0xa8, 0xf6, 0x43, 0x0d, 0x75, 0x44, 0x84, 0x97, 0x0c, 0xb3, 0x21,
	0x54, 0xd8, 0xd7, 0x0a, 0x1a, 0x42, 0x85, 0xaf, 0xc8, 0x03, 0x33, 0xc2, 0x50, 0x60, 0x5c, 0x64,
	0x27, 0xc9, 0x74, 0xa1, 0xae, 0x85, 0x17, 0x28, 0x33, 0xe7, 0xf9, 0x1b, 0xe4, 0xd1, 0x7c, 0x97,
	0xe9, 0xb1, 0xde, 0xc7, 0x4e, 0x07, 0xb3, 0x9d, 0x26, 0x87, 0xfb, 0x31, 0x29, 0x85, 0xb1, 0x07,
	0xb9, 0x3d, 0xd1, 0xd7, 0xd5, 0x03, 0xed, 0x2b, 0x19, 0x98, 0xdd, 0x59, 0x87, 0xbe, 0x4c, 0x5c,
	0x88, 0xaa, 0x07, 0x18, 0xbe, 0x93, 0x36, 0xec, 0x45, 0x5e, 0x5f, 0xc3, 0x4c, 0x58, 0xf5, 0x3f,
	0xc4, 0x8c, 0x40, 0x34, 0x84, 0x45, 0xff, 0xd7, 0xe4, 0x61, 0x16, 0x01, 0x18, 0x5b, 0x7c, 0x18,
	0x2b, 0x1f, 0x09, 0xef, 0x91, 0x5e, 0x97, 0x89, 0x04, 0x14, 0x5e, 0x18, 0x59, 0xed, 0x6f, 0x76,
	0x48, 0x05, 0x43, 0x52, 0xba, 0x83, 0x37, 0x22, 0xf0, 0x7c, 0x01, 0x70, 0x23, 0x8e, 0xae, 0xfd,
	0x3e, 0xd0, 0x6d, 0x96, 0x58, 0xcc, 0xed, 0xda, 0x34, 0xc1, 0xf7, 0xc3, 0x91, 0xc2, 0xe0, 0x40,
	0x9b, 0xe9, 0x3b, 0xf6, 0xae, 0x53, 0x04, 0xf4, 0xfc, 0x6d, 0x04, 0xc6, 0x52, 0xa0, 0x25, 0x82,
	0x20, 0x7e, 0xcb, 0x45, 0x10, 0x70, 0x25, 0x53, 0x9d, 0x4a, 0x77, 0x9d, 0x22, 0xa2, 0xf5, 0x20,
	0xe8, 0x49, 0x7d, 0x1b, 0x57, 0x58, 0xd3, 0x02, 0x79, 0x6f, 0x6a, 0xba, 0x48, 0x6d, 0xcf, 0x94,
	0x65, 0x7e, 0xc4, 0x43, 0x3f, 0xe3, 0xbb, 0x1c, 0xb4, 0xbb, 0x7e, 0x34, 0x15, 0x89, 0x3b, 0x13,
	0x4d, 0x5a, 0x24, 0xee, 0x20, 0x4b, 0xf9, 0xa9, 0x0c, 0x15, 0x76, 0x33, 0x37, 0x59, 0x04, 0xa0,
	0xdf, 0x54, 0x28, 0xee, 0x4c, 0x10, 0x19, 0xa1, 0xb8, 0x63, 0x5f, 0x10, 0x96, 0x0d, 0xca, 0x7d,
	0xf0, 0xb1, 0xc8, 0x95, 0xca, 0xd0, 0x1b, 0x35, 0xc3, 0xdb, 0x19, 0xce, 0x4e, 0xc8, 0xfd, 0xc9,
	0x50, 0x33, 0xea, 0x9a, 0xf1, 0xf6, 0xb3, 0x41, 0xa7, 0xfa, 0x5f, 0x10, 0x86, 0xe4, 0x3c, 0xaf,
	0xae, 0x2f, 0xa3, 0x14, 0x24, 0x73, 0xda, 0x4d, 0x52, 0x40, 0x5f, 0x0c, 0xfc, 0xd0, 0x4f, 0x55,
	0xa5, 0x88, 0x65, 0xf3, 0xc7, 0x27, 0xeb, 0x8e, 0xea, 0x04, 0x0c, 0xde, 0x01, 0x5d, 0x87, 0xb8,
	0xd9, 0x4f, 0xc5, 0x7e, 0x9f, 0x94, 0x13, 0xf9, 0xfd, 0xc8, 0x4f, 0xa4, 0x67, 0x8e, 0xa9, 0xf4,
	0xfe, 0x03, 0x95, 0xb2, 0xae, 0xfa, 0x30, 0x61, 0xbf, 0x91, 0x1b, 0x8c, 0x3c, 0xc9, 0xcd, 0x05,
	0x03, 0x4f, 0xb4, 0x8c, 0x27, 0xba, 0x6f, 0x44, 0x75, 0x94, 0xe0, 0xb1, 0x76, 0x08, 0xbd, 0x0a,
	0x62, 0x77, 0x20, 0x3d, 0x9e, 0x88, 0xc4, 0x4f, 0x7d, 0xa9, 0x2a, 0x7b, 0x87, 0x9b, 0x47, 0xe5,
	0xe7, 0xcf, 0xd6, 0xcf, 0xde, 0x72, 0x40, 0x75, 0xec, 0xec, 0x99, 0xae, 0x8e, 0xe9, 0x59, 0x6d,
	0x90, 0xfc, 0x64, 0x65, 0xe0, 0x31, 0x59, 0xa0, 0x6a, 0xbf, 0xdc, 0x71, 0x75, 0x70, 0x3e, 0x21,
	0xb8, 0x7b, 0x8e, 0x69, 0xd9, 0x64, 0x80, 0x3c, 0x20, 0x0d, 0x00, 0x6a, 0x2d, 0x92, 0x33, 0x13,
	0x40, 0x75, 0x2d, 0xf5, 0x4f, 0xde, 0xc0, 0x97, 0x27, 0x6a, 0xb1, 0x03, 0x42, 0x33, 0xec, 0x75,
	0xa4, 0xdf, 0xa3, 0x74, 0xd1, 0x9e, 0xa1, 0x8e, 0x48, 0x24, 0xdd, 0xac, 0xfd, 0xfb, 0x86, 0x8e,
	0x99, 0x7a, 0x34, 0xbe, 0x8c, 0xdb, 0x0d, 0x47, 0x0e, 0xe3, 0x24, 0xad, 0x2b, 0x25, 0x93, 0x54,
	0xfd, 0x92, 0x98, 0xa9, 0x93, 0x9c, 0xd0, 0x4a, 0xe6, 0xc5, 0xe7, 0xb3, 0x93, 0x75, 0xa3, 0x9c,
	0x5c, 0x26, 0x02, 0xb6, 0xaf, 0x9b, 0x4e, 0xd6, 0xaf, 0xfa, 0x5f, 0x16, 0x29, 0xcd, 0x89, 0x80,
	0x32, 0xae, 0xfd, 0x40, 0x22, 0x27, 0x58, 0xc8, 0x09, 0x93, 0x36, 0x50, 0x46, 0xe0, 0x47, 0x92,
	0x47, 0x23, 0xa8, 0x8d, 0xb3, 0xeb, 0x31, 0x40, 0x67, 0xa3, 0xec, 0xa5, 0x41, 0x89, 0x70, 0x18,
	0x48, 0x1e, 0x2a, 0x5d, 0x96, 0xe4, 0x9d, 0xbc, 0x46, 0xba, 0xaa, 0x8f, 0x2c, 0xae, 0xc5, 0x0a,
	0x99, 0x7e, 0x4b, 0xbf, 0x34, 0x68, 0xac, 0x87, 0x44, 0x0f, 0x0c, 0xeb, 0x87, 0x52, 0xf1, 0x6b,
	0x70, 0x94, 0xac, 0x2a, 0x41, 0xe8, 0x25, 0x20, 0xc0, 0x7b, 0xd7, 0xa3, 0x08, 0x0b, 0x2c, 0x4d,
	0x5c, 0x3b, 0x38, 0x48, 0x31, 0x03, 0x91, 0xba, 0x3e, 0x24, 0x79, 0x37, 0x8e, 0x3c, 0xcd, 0x56,
	0x39, 0xbd, 0x8c, 0x09, 0x50, 0xfb, 0x6d, 0x72, 0xb8, 0xce, 0x4e, 0x8e, 0x54, 0xc3, 0x38, 0x52,
	0x12, 0xac, 0xae, 0x46, 0xae, 0x0b, 0xd7, 0x04, 0x4b, 0xbf, 0x5a, 0x98, 0x66, 0xed, 0x9f, 0xf2,
	0x84, 0x41, 0xf7, 0xec, 0x52, 0x68, 0xa8, 0xed, 0xe9, 0xfc, 0x6d, 0xda, 0x32, 0x57, 0xcc, 0xe9,
	0x3d, 0x5a, 0xdf, 0x6d, 0xbd, 0x38, 0xe4, 0x6e, 0x1c, 0xc4, 0x89, 0xca, 0xea, 0x09, 0x0d, 0x36,
	0x10, 0xd3, 0x34, 0x74, 0xc7, 0xdf, 0xfa, 0x51, 0x76, 0x4b, 0xc8, 0x85, 0xe2, 0xee, 0x5b, 0x3f,
	0x52, 0x60, 0x5b, 0x10, 0x05, 0xb1, 0x52, 0x32, 0xab, 0x4a, 0xf3, 0xa1, 0xb8, 0xeb, 0x20, 0x00,
	0x44, 0x04, 0xe2, 0xbe, 0x08, 0xa5, 0x32, 0x66, 0x83, 0xa1, 0xda, 0xd0, 0x06, 0xaa, 0x10, 0x69,
	0x2a, 0xc3, 0x61, 0xaa, 0x78, 0x9a, 0xc4, 0xc3, 0x9b, 0xf1, 0xb4, 0x6a, 0xa0, 0x99, 0xe4, 0x12,
	0x05, 0xb6, 0xc7, 0x7e, 0x44, 0x72, 0x89, 0x7c, 0x8b, 0xd1, 0xad, 0x6f, 0xd7, 0x1f, 0x9d, 0x2c,
	0x6f, 0xf8, 0xc4, 0x41, 0x95, 0x4b, 0x5f, 0x26, 0x4e, 0xa6, 0xce, 0x7e, 0x93, 0xe4, 0x6f, 0x45,
	0xe0, 0x7b, 0x22, 0x8d, 0x13, 0x64, 0xc3, 0x02, 0x5c, 0xa0, 0xd7, 0xc4, 0xa6, 0x33, 0xd5, 0x85,
	0x4b, 0xca, 0xfc, 0xad, 0x12, 0xd6, 0xa7, 0x89, 0x72, 0x6f, 0xee, 0x62, 0x69, 0x0c, 0x29, 0xfb,
	0xbe, 0x4a, 0x65, 0xc2, 0xe1, 0xb6, 0x80, 0x0c, 0xb9, 0xeb, 0x14, 0x33, 0x10, 0xe6, 0x02, 0x57,
	0x9b, 0xb9, 0xf1, 0x67, 0xb4, 0x58, 0x98, 0x5e, 0xf9, 0xb5, 0x51, 0x46, 0x69, 0xcc, 0x87, 0xf1,
	0x70, 0x14, 0x88, 0x54, 0xea, 0xc1, 0x8a, 0x38, 0x18, 0x05, 0xc9, 0x85, 0x11, 0xe0, 0x80, 0xaf,
	0x08, 0x9d, 0x19, 0x90, 0xfb, 0xd1, 0x75, 0x6c, 0xb8, 0x6f, 0xa5, 0x75, 0xda, 0x93, 0x89, 0x9c,
	0xf2, 0x74, 0x52, 0xbc, 0xad, 0x7d, 0x4a, 0xf6, 0x5c, 0x11, 0x71, 0x4c, 0xd4, 0x63, 0x3d, 0xa9,
	0xe6, 0xbc, 0x92, 0x2b, 0xa2, 0x2e, 0xa2, 0x38, 0x23, 0xa4, 0x16, 0x65, 0xa8, 0x11, 0x6b, 0x95,
	0x5d, 0x67, 0xd7, 0x57, 0x9a, 0x10, 0xe1, 0x22, 0xa2, 0xe0, 0x2e, 0x08, 0x37, 0x84, 0xec, 0x3e,
	0x63, 0x0a, 0x16, 0x9a, 0x09, 0xb2, 0x1b, 0x53, 0xf5, 0x17, 0x16, 0x21, 0xd3, 0xe3, 0x62, 0x6d,
	0x52, 0x34, 0x4e, 0x80, 0x2b, 0x33, 0xaf, 0x6b, 0x3f, 0xf8, 0xe5, 0x87, 0xac, 0x77, 0xe4, 0x14,
	0x74, 0x4f, 0x6c, 0xb0, 0x06, 0x21, 0x90, 0x96, 0xcc, 0x30, 0x1b, 0xff, 0x8b, 0x61, 0x30, 0x69,
	0xea, 0x41, 0xc0, 0xe5, 0xfd, 0x68, 0xde, 0xe5, 0xfd, 0x08, 0x5c, 0xbe, 0xfa, 0x3b, 0x64, 0x7b,
	0xa2, 0xa3, 0x8d, 0x3f, 0x89, 0xac, 0x1c, 0xb6, 0xf5, 0x85, 0xfe, 0xfb, 0x91, 0x88, 0x52, 0x3f,
	0x1d, 0x9b, 0x88, 0x9a, 0xb4, 0xab, 0xff, 0x60, 0x11, 0x32, 0x3d, 0x08, 0xd6, 0x25, 0xfa, 0xc9,
	0x87, 0xcf, 0xdc, 0x0c, 0x56, 0x1e, 0x5e, 0x0b, 0x3b, 0x41, 0x05, 0xf5, 0xa2, 0x3c, 0xc0, 0xdf,
	0xfc, 0x75, 0x34, 0x88, 0xe2, 0xb7, 0x91, 0x93, 0xef, 0x67, 0xa2, 0xe9, 0xa3, 0xd2, 0x6c, 0x72,
	0xd0, 0x33, 0x60, 0x76, 0x00, 0x1f, 0x4c, 0xe4, 0x50, 0x8a, 0x4c, 0x43, 0xef, 0xae, 0xa0, 0x31,
	0xad, 0xf2, 0x94, 0x14, 0x3c, 0x5f, 0xe1, 0xb3, 0x35, 0x30, 0xa6, 0x26, 0x44, 0x62, 0xa0, 0xae,
	0xea, 0xd7, 0x3c, 0x42, 0xa6, 0xab, 0xc1, 0x27, 0x9c, 0xb9, 0xf5, 0xd0, 0x7b, 0x6c, 0x8f, 0x14,
	0x0c, 0x06, 0xf7, 0x32, 0x6a, 0xcd, 0x00, 0x90, 0xe0, 0xe8, 0xc6, 0x0c, 0x60, 0xa7, 0x32, 0xa4,
	0x9b, 0x33, 0xc0, 0x85, 0x70, 0x07, 0x74, 0xab, 0xf6, 0x27, 0x85, 0xc9, 0x4d, 0x35, 0xf1, 0x6f,
	0x45, 0xaa, 0x1f, 0xf5, 0xe0, 0xaa, 0x31, 0xd4, 0xed, 0xe9, 0xdb, 0x9f, 0x85, 0xaf, 0x35, 0xe5,
	0xe1, 0x8c, 0x9e, 0xed, 0xb1, 0xaf, 0xa7, 0x9f, 0x2c, 0xb4, 0x1b, 0x54, 0x4f, 0x96, 0xc7, 0x5b,
	0xfa, 0x72, 0xf1, 0x35, 0xc9, 0xf9, 0xd1, 0xad, 0x9f, 0x4a, 0x38, 0xf9, 0xb5, 0xbd, 0x6c, 0x54,
	0x71, 0x32, 0xd5, 0x15, 0xdf, 0x3b, 0xb6, 0xde, 0xf7, 0x7b, 0x07, 0xd6, 0x62, 0xf8, 0x70, 0x21,
	0x06, 0x50, 0x13, 0x6f, 0xeb, 0xb8, 0x83, 0x42, 0x2c, 0x75, 0x6f, 0xba, 0x08, 0xae, 0x7e, 0x30,
	0xd9, 0x59, 0xfd, 0x60, 0x72, 0x4c, 0xf6, 0x45, 0xa2, 0x99, 0x43, 0xf1, 0x5b, 0x5f, 0xf9, 0x57,
	0x81, 0xc4, 0x84, 0xb3, 0xeb, 0xec, 0x89, 0x04, 0x99, 0x43, 0xbd, 0xd1, 0x30, 0xfb, 0xd1, 0xdc,
	0xbb, 0xe5, 0x2e, 0xae, 0xf9, 0xf1, 0x4a, 0x33, 0x2d, 0x3e, 0x5f, 0x76, 0x08, 0x66, 0xc0, 0x44,
	0xbf, 0xb7, 0xe4, 0xd1, 0x71, 0xf7, 0x66, 0x1e, 0xe1, 0x41, 0xf6, 0xe2, 0xc3, 0x01, 0x97, 0x73,
	0x08, 0x7f, 0x1d, 0xa9, 0xa1, 0x74, 0xf1, 0xf9, 0xcf, 0xc9, 0xe3, 0x00, 0xd9, 0x07, 0x0c, 0xb3,
	0x8e, 0xec, 0x4c, 0x09, 0x7e, 0xf6, 0x29, 0xea, 0x09, 0xcd, 0x89, 0xd6, 0x49, 0x51, 0xdd, 0x08,
	0xa8, 0xf3, 0x70, 0x73, 0x95, 0x42, 0xc6, 0x75, 0xcb, 0xeb, 0xed, 0xa1, 0x1e, 0xec, 0xd5, 0x29,
	0xa8, 0xc9, 0x6f, 0xc5, 0x7e, 0x8f, 0x94, 0xf1, 0x79, 0x67, 0x9a, 0x12, 0x8a, 0xef, 0x4a, 0x09,
	0x25, 0x4f, 0xa3, 0x26, 0x2d, 0x2c, 0xe5, 0xcc, 0xd2, 0x8a, 0x9c, 0xd9, 0x23, 0x79, 0xc8, 0x7a,
	0xda, 0x38, 0x65, 0x34, 0xce, 0x03, 0x34, 0xce, 0xec, 0x22, 0xf1, 0x4d, 0xea, 0xa9, 0x36, 0xd1,
	0x22, 0xce, 0x7b, 0xa9, 0x88, 0x3c, 0x91, 0x78, 0xce, 0x2e, 0x0c, 0x84, 0x46, 0x82, 0xd2, 0xdd,
	0x8f, 0xf8, 0xc2, 0x6b, 0xd8, 0x9e, 0x29, 0xdd, 0xfd, 0xa8, 0x31, 0xf7, 0x20, 0x86, 0x85, 0xfe,
	0xdd, 0xa2, 0x36, 0xcd, 0x0a, 0xfd, 0xbb, 0x39, 0xed, 0xea, 0xbf, 0xfd, 0x8a, 0x7c, 0x9a, 0x79,
	0x42, 0x08, 0x9e, 0xcf, 0xd5, 0x38, 0x35, 0x35, 0x43, 0xd1, 0xc1, 0x07, 0xb9, 0x53, 0x00, 0xb2,
	0x2f, 0x37, 0x98, 0xa0, 0x72, 0x93, 0x2f, 0x37, 0x98, 0x9a, 0x96, 0xdf, 0x09, 0x77, 0x57, 0xbc,
	0x13, 0x56, 0x7d, 0xb2, 0xa3, 0x83, 0xf7, 0xff, 0x61, 0x9f, 0x4f, 0x08, 0xd1, 0x04, 0xe0, 0xf1,
	0xab, 0xb1, 0xa1, 0xd2, 0xbc, 0x41, 0x4e, 0xc7, 0xd5, 0x31, 0x21, 0x53, 0x37, 0x64, 0x3f, 0x24,
	0x07, 0xc6, 0x79, 0xaf, 0xc6, 0x7c, 0x69, 0xe2, 0x7d, 0x2d, 0x3b, 0x1d, 0xd7, 0x27, 0x0b, 0x98,
	0x37, 0xc5, 0xc6, 0xa2, 0x29, 0xb2, 0x87, 0x4a, 0x5c, 0x9c, 0x2e, 0x6b, 0xf1, 0xa1, 0x12, 0x56,
	0x56, 0xbd, 0xc8, 0xbe, 0x1d, 0xcc, 0xbe, 0xfa, 0x5b, 0xf3, 0x5f, 0x43, 0xbf, 0x20, 0xec, 0xad,
	0x1f, 0x45, 0x90, 0xad, 0x17, 0xdf, 0x89, 0x1d, 0x6a, 0x24, 0x93, 0xd5, 0x1c, 0xff, 0x01, 0x39,
	0x68, 0xb5, 0x1b, 0xfa, 0x51, 0x2b, 0x8c, 0xa3, 0x09, 0x83, 0x3d, 0x25, 0xd5, 0x01, 0x6f, 0xad,
	0x29, 0x5d, 0xe9, 0x3f, 0x7f, 0xc3, 0x3e, 0x23, 0xb5, 0xf5, 0x0a, 0x59, 0x6d, 0x4b, 0xff, 0xe5,
	0x9b, 0xe3, 0x3f, 0xdf, 0x20, 0xa5, 0xb9, 0xe7, 0x59, 0xf6, 0x01, 0x59, 0xf7, 0x62, 0x4b, 0x2d,
	0xf6, 0x21, 0xa9, 0x2c, 0x0a, 0x5f, 0x47, 0x89, 0x88, 0x06, 0x12, 0xf2, 0xcb, 0x0a, 0x69, 0x96,
	0x50, 0xe9, 0x26, 0xab, 0x92, 0x87, 0x8b, 0x52, 0x5d, 0xca, 0xd1, 0x2d, 0xfd, 0xb5, 0x62, 0x5e,
	0xd6, 0x4c, 0xc4, 0x75, 0x4a, 0xb7, 0xd9, 0x21, 0xf9, 0x70, 0x51, 0x34, 0x1b, 0xb7, 0x74, 0x67,
	0xd5, 0xc0, 0x17, 0xa3, 0x9f, 0xfe, 0x34, 0x90, 0x34, 0xc7, 0x1e, 0x12, 0xb6, 0x28, 0xab, 0xdb,
	0x74, 0x97, 0x7d, 0x84, 0x16, 0x9c, 0xc3, 0x2f, 0x27, 0xdf, 0x4e, 0x69, 0xfe, 0xd8, 0xd3, 0x66,
	0x99, 0xc4, 0xcb, 0x74, 0x85, 0x0b, 0x21, 0x44, 0xef, 0xad, 0x13, 0x7d, 0x45, 0x2d, 0xf6, 0x84,
	0x3c, 0x5e, 0x14, 0xf5, 0x86, 0xd2, 0x4d, 0x81, 0xd4, 0x28, 0x3d, 0xfe, 0xb9, 0x45, 0xca, 0xf3,
	0xec, 0xad, 0xb7, 0xbb, 0x9e, 0xbf, 0xe9, 0x3d, 0x3d, 0xe6, 0x82, 0x46, 0xd3, 0x57, 0xe2, 0x2a,
	0x90, 0x5e, 0x76, 0x44, 0x8b, 0x62, 0x79, 0x2d, 0x46, 0x41, 0x4a, 0x37, 0xd8, 0x53, 0xf2, 0xc1,
	0x92, 0x74, 0x66, 0xe3, 0x9b, 0xc7, 0xff, 0x61, 0x91, 0x83, 0x55, 0x9c, 0xc9, 0x3e, 0x26, 0xef,
	0x62, 0x4d, 0x7a, 0x8f, 0xd5, 0xc8, 0x47, 0x6b, 0x94, 0x1c, 0x64, 0x6a, 0xb0, 0xc9, 0xbb, 0x74,
	0x9e, 0xd3, 0x8d, 0x77, 0xea, 0xfc, 0x3a, 0xdd, 0x7c, 0xa7, 0xce, 0xd7, 0x74, 0x6b, 0x6a, 0xcd,
	0x25, 0x9d, 0xc6, 0x8d, 0x88, 0x15, 0xdd, 0x3e, 0xfe, 0x3b, 0x8b, 0xec, 0x2f, 0xfd, 0xb5, 0x81,
	0x76, 0x8f, 0x75, 0x7f, 0x6f, 0x40, 0xef, 0xad, 0x93, 0xdb, 0x11, 0x5c, 0xb3, 0xa8, 0xc5, 0x9e,
	0x91, 0x27, 0xab, 0xe4, 0x93, 0x6f, 0xd5, 0x74, 0x63, 0x9d, 0x4a, 0xcf, 0xef, 0x47, 0xd2, 0x3b,
	0x1f, 0x41, 0xc4, 0xac, 0x51, 0xa9, 0x67, 0xdf, 0x51, 0xe9, 0xd6, 0xf1, 0x97, 0xa4, 0xd8, 0x6a,
	0x4f, 0xbf, 0x86, 0x9b, 0x68, 0x59, 0xfb, 0x75, 0x9c, 0x5a, 0xc7, 0xff, 0xb8, 0x43, 0xee, 0xaf,
	0x78, 0x04, 0x67, 0x35, 0xb2, 0xfa, 0x19, 0x9c, 0xfe, 0x77, 0xf6, 0x9f, 0xc5, 0x2a, 0xe4, 0x60,
	0x5e, 0xa7, 0x59, 0xef, 0xd6, 0xdb, 0x2d, 0x7a, 0x0f, 0xe2, 0x6c, 0x5e, 0xf2, 0xaa, 0x55, 0xef,
	0x50, 0x6b, 0x19, 0x6f, 0x3a, 0xf5, 0x6f, 0xe9, 0xc6, 0x32, 0x7e, 0x51, 0xef, 0xf5, 0xe8, 0xe6,
	0xf2, 0x0c, 0xfa, 0x17, 0xdd, 0x02, 0xbf, 0x5e, 0xe8, 0xd1, 0xa9, 0x7f, 0xc7, 0x1b, 0x4e, 0xab,
	0x75, 0x41, 0xb7, 0xc1, 0x19, 0x56, 0x48, 0xed, 0xee, 0x85, 0x73, 0xfe, 0xa6, 0xd5, 0x6d, 0x9d,
	0x5d, 0xd2, 0x9d, 0x35, 0x23, 0xf4, 0x2e, 0x5a, 0x9d, 0x0e, 0xcd, 0x81, 0xe5, 0x56, 0x48, 0x5b,
	0x3f, 0x79, 0x6d, 0x5f, 0x60, 0x7f, 0xe4, 0x8c, 0x15, 0x1a, 0xf5, 0x53, 0xbb, 0x63, 0x5f, 0x7e,
	0x47, 0xf3, 0xc0, 0x9c, 0xf3, 0xf2, 0x76, 0xdd, 0x3e, 0xe3, 0xed, 0xf3, 0x4e, 0x93, 0x12, 0x20,
	0xa9, 0x79, 0xe1, 0xe9, 0xeb, 0xef, 0xb8, 0x7d, 0xd9, 0xea, 0xd2, 0x02, 0x10, 0xc8, 0x82, 0x91,
	0xec, 0x5e, 0xa3, 0xee, 0x34, 0x69, 0x71, 0x79, 0xce, 0x7a, 0xb3, 0xc9, 0xbb, 0xe7, 0x4d, 0xfb,
	0xa5, 0xdd, 0x72, 0x68, 0x09, 0x5c, 0x64, 0x5e, 0xee, 0xb4, 0xba, 0xe7, 0x6f, 0x5a, 0x53, 0x95,
	0xf2, 0xb2, 0xa9, 0x7f, 0x6c, 0x77, 0x3a, 0x74, 0x6f, 0x79, 0xb9, 0x30, 0x25, 0x87, 0xde, 0x94,
	0x02, 0xc9, 0x2c, 0x08, 0xc1, 0xd0, 0xbc, 0x77, 0x51, 0xff, 0xf6, 0x8c, 0xee, 0xb3, 0x47, 0x8b,
	0x3e, 0xd4, 0x6c, 0xd5, 0x2f, 0x5f, 0x51, 0xb6, 0xa2, 0x1f, 0xfe, 0xe2, 0xe7, 0x6f, 0x5a, 0x0e,
	0xbd, 0xcf, 0x3e, 0x27, 0x9f, 0x2d, 0x58, 0xa1, 0xd5, 0x6e, 0xdb, 0x67, 0xf6, 0x59, 0x9b, 0x9f,
	0xbf, 0xd4, 0x47, 0xd1, 0xa8, 0xf7, 0x2e, 0xed, 0xb3, 0x36, 0x3d, 0x60, 0x3f, 0x24, 0x9f, 0xbf,
	0xa7, 0x32, 0x6f, 0x9d, 0x35, 0xe9, 0x03, 0xf6, 0x29, 0xa9, 0xcd, 0x77, 0x78, 0x7d, 0x66, 0x5f,
	0xf2, 0xd6, 0xd9, 0x65, 0xcb, 0x01, 0x25, 0xe3, 0x4a, 0x0f, 0xd9, 0x27, 0xe4, 0xd9, 0x0a, 0xbd,
	0x4e, 0xab, 0xfe, 0x66, 0x46, 0xed, 0x11, 0x30, 0xde, 0x42, 0xa0, 0x38, 0x76, 0xbb, 0xdd, 0x72,
	0xb2, 0x7f, 0x5b, 0x4d, 0x5a, 0x39, 0xdd, 0x7e, 0x65, 0xfd, 0xcc, 0xba, 0xf7, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x29, 0xf4, 0xf6, 0xfb, 0x75, 0x26, 0x00, 0x00,
}
