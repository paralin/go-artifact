import "dcg_gcmessages_common.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum EGCDCGServerMessages {
	k_EMsgServerToGCMatchSignoutPermission = 10012;
	k_EMsgServerToGCMatchSignoutPermissionResponse = 10013;
	k_EMsgServerToGCMatchSignout = 10014;
	k_EMsgServerToGCMatchSignoutResponse = 10015;
	k_EMsgServerToGCValidateCardOwnership = 10016;
	k_EMsgServerToGCValidateCardOwnershipResponse = 10017;
	k_EMsgServerToGCIdlePing = 10018;
	k_EMsgGCToServerRequestPing = 10019;
	k_EMsgGCToServerAllocateForMatch = 10021;
	k_EMsgGCToServerAllocateForMatchResponse = 10022;
	k_EMsgServerToGCEnterMatchmaking = 10023;
	k_EMsgGCToServerCancelAllocateForMatch = 10024;
	k_EMsgServerToGCUpdateLobbyServerState = 10025;
	k_EMsgServerToGCAbandonMatch = 10026;
	k_EMsgServerToGCAbandonMatchResponse = 10027;
	k_EMsgServerToGCTestConnection = 10028;
	k_EMsgServerToGCTestConnectionResponse = 10029;
	k_EMsgGCToServerRunTests = 10031;
	k_EMsgGCToServerRunTestsResponse = 10032;
	k_EMsgServerToGCTestResults = 10033;
	k_EMsgGCToServerAddSpectator = 10034;
	k_EMsgGCToServerAddSpectatorResponse = 10035;
}

enum EGCServerLobbyData {
	k_EServerLobbyData_DraftCards = 3;
	k_EServerLobbyData_PlayerDeck = 4;
	k_EServerLobbyData_PlayerRating = 5;
	k_EServerLobbyData_CardAchievements = 6;
	k_EServerLobbyData_GauntletInfo = 7;
	k_EServerLobbyData_PrivateLobbyInfo = 8;
}

enum EGCServerSignoutData {
	k_EServerSignoutData_ServerCommandReplay = 1;
	k_EServerSignoutData_PlayerDecks = 2;
	k_EServerSignoutData_TurnStats = 3;
	k_EServerSignoutData_LobbyInfo = 4;
	k_EServerSignoutData_ClientReplay = 5;
	k_EServerSignoutData_DraftResults = 8;
	k_EServerSignoutData_GameOptions = 9;
	k_EServerSignoutData_CardAchievements = 11;
}

message CMsgServerCrashSentinelFile {
	message DCGGameInfo {
		optional uint64 match_id = 1;
		optional fixed64 lobby_id = 2;
		optional uint32 league_id = 3;
		optional uint32 server_state = 4;
		repeated uint32 client_account_ids = 5;
	}

	optional uint32 version = 1;
	optional fixed64 server_steam_id = 2;
	optional fixed32 server_public_ip_addr = 3;
	optional uint32 server_port = 4;
	optional uint32 server_cluster = 5;
	optional uint32 pid = 6;
	optional uint32 saved_time = 7;
	optional uint32 server_version = 8;
	optional .CMsgServerCrashSentinelFile.DCGGameInfo dcg_info = 9;
}

message CServerLobbyData_CardAchievements {
	optional uint32 account_id = 1;
	repeated uint32 achievement_ids = 2 [packed = true];
	repeated uint32 progress = 3 [packed = true];
}

message CServerDraftCard {
	optional uint32 def_index = 1;
}

message CServerLobbyData_DraftCards {
	message Pack {
		optional uint64 pack_item_id = 1;
		repeated .CServerDraftCard pack_cards = 2;
	}

	message Player {
		optional uint32 account_id = 1;
		repeated .CServerLobbyData_DraftCards.Pack packs = 2;
		optional bool cannot_trade = 3;
		optional uint32 trade_restriction_time = 4;
	}

	repeated .CServerLobbyData_DraftCards.Player players = 1;
}

message CServerLobbyData_PlayerDeck {
	optional bytes deck_data = 1;
}

message CServerLobbyData_PlayerRating {
	message Player {
		optional uint32 account_id = 1;
		optional uint32 rating = 2;
	}

	repeated .CServerLobbyData_PlayerRating.Player players = 1;
}

message CServerLobbyData_GauntletInfo {
	optional .CMsgGauntletConfig gauntlet_config = 1;
}

message CServerLobbyData_PrivateLobbyInfo {
	optional .CMsgDeckValdiationConfig deck_validator = 1;
	optional uint32 random_colors = 2;
}

message CSODCGServerLobby {
	repeated .CExtraMsgBlock extra_messages = 1;
	optional fixed64 server_steam_id = 2;
	optional uint64 lobby_id = 3;
	optional fixed32 replay_salt = 4;
	optional fixed64 private_lobby_id = 5;
	optional .EDCGLobbyTimer timer_mode = 6 [default = k_eDCGLobbyTimer_Unspecified];
}

message CMsgServerSignoutData_ServerCommandReplay {
	optional bytes replay_data = 1;
	optional uint32 version = 2;
}

message CMsgServerSignoutData_ClientReplay {
	optional bytes replay_data = 1;
	optional uint32 version = 2;
}

message CMsgServerSignoutData_LobbyInfo {
	optional uint64 match_id = 1;
	optional uint32 start_time = 2;
	optional uint32 league_id = 3;
	optional uint32 server_version = 4;
	optional uint32 replay_salt = 5;
	optional .EDCGMatchMode match_mode = 6 [default = k_EDCGMatchMode_NewUser];
}

message CMsgServerSignoutData_PlayerDecks {
	message Player {
		message Hero {
			optional uint32 card_id = 1;
			optional uint32 hero_slot = 2;
			optional uint32 equipment_cost = 3;
			optional uint32 weapon_equip = 4;
			optional uint32 armor_equip = 5;
			optional uint32 misc_equip = 6;
			optional uint32 turns_in_fountain = 7;
		}

		message Card {
			optional uint32 card_id = 1;
			optional uint32 num_in_deck = 2;
			optional uint32 num_in_hand = 3;
			optional uint32 num_played = 4;
			optional uint32 num_lanes_unavailable = 5;
			optional uint32 num_lanes_available = 6;
			optional uint32 damage_dealt = 7;
			optional uint32 tower_damage_dealt = 8;
			optional uint32 damage_receieved = 9;
			optional uint32 healing_given = 10;
			optional uint32 healing_received = 11;
			optional uint32 num_deaths = 12;
		}

		optional uint32 player_id = 1;
		repeated .CMsgServerSignoutData_PlayerDecks.Player.Card cards = 2;
		repeated .CMsgServerSignoutData_PlayerDecks.Player.Hero heroes = 3;
		optional string deck_code = 4;
		optional fixed64 deck_checksum = 5;
		optional uint32 critical_life = 6;
		optional uint32 total_gold = 7;
	}

	repeated .CMsgServerSignoutData_PlayerDecks.Player players = 1;
	optional uint32 stats_version = 2;
}

message CMsgServerSignoutData_TurnStats {
	message Turn {
		message PlayerShop {
			message StoreItem {
				optional uint32 card_id = 1;
				optional uint32 store_slot = 2;
				optional uint32 sequence = 3;
				optional uint32 action = 4;
			}

			optional uint32 player_id = 1;
			optional uint32 start_gold = 2;
			repeated .CMsgServerSignoutData_TurnStats.Turn.PlayerShop.StoreItem items = 3;
		}

		message Lane {
			message Player {
				optional uint32 player_id = 1;
				optional uint32 tower_health = 2;
				optional uint32 ancient_health = 3;
				optional uint32 starting_hand_size = 4;
				optional uint32 times_passed = 5;
				optional uint32 quick_cards = 6;
				optional uint32 playable_cards = 7;
				optional uint32 time_active_ms = 8;
				optional uint32 peak_lane_cards = 9;
				optional uint32 starting_gold = 10;
				optional uint32 total_gold = 11;
				optional uint32 peak_improvements = 12;
				optional uint32 damage_dealt = 13;
				optional uint32 cards_died = 14;
				optional uint32 mana_used = 15;
				optional uint32 game_clock = 16;
			}

			optional uint32 lane = 1;
			optional uint32 rounds = 2;
			repeated .CMsgServerSignoutData_TurnStats.Turn.Lane.Player players = 3;
			optional uint32 starting_player = 4;
			optional uint32 ending_player = 5;
		}

		optional uint32 turn = 1;
		optional uint32 duration_s = 2;
		optional uint32 shopping_s = 3;
		optional uint32 hero_placement_s = 4;
		repeated .CMsgServerSignoutData_TurnStats.Turn.Lane lanes = 5;
		repeated .CMsgServerSignoutData_TurnStats.Turn.PlayerShop shops = 6;
	}

	repeated .CMsgServerSignoutData_TurnStats.Turn turns = 1;
	optional uint32 stats_version = 2;
}

message CMsgServerToGCMatchSignoutPermission {
	optional uint32 signout_start = 1;
	optional uint32 league_id = 2;
	optional uint64 match_id = 3;
}

message CMsgServerToGCMatchSignoutPermissionResponse {
	optional bool can_sign_out = 1;
	optional uint32 retry_time_s = 2;
	repeated .EGCServerSignoutData requested_data = 3;
}

message CMsgServerSignoutData_CardAchievements {
	optional uint32 account_id = 1;
	repeated uint32 achievement_ids = 2 [packed = true];
	repeated uint32 grant_amounts = 3 [packed = true];
}

message CMsgServerSignoutData_DraftResults {
	message Card {
		optional uint32 pack_number = 1;
		optional uint32 card_number = 2;
		optional .CServerDraftCard card = 3;
	}

	message Player {
		optional uint32 account_id = 1;
		repeated .CMsgServerSignoutData_DraftResults.Card draft_cards = 2;
		optional bool cannot_trade = 3;
		optional uint32 trade_restriction_time = 4;
		repeated uint64 pack_item_ids = 5;
		optional uint32 player_position = 6;
	}

	enum EResult {
		k_EResult_Success = 1;
		k_EResult_FailAndRollback = 2;
	}

	optional .CMsgServerSignoutData_DraftResults.EResult result = 1 [default = k_EResult_Success];
	repeated .CMsgServerSignoutData_DraftResults.Player players = 2;
}

message CMsgServerSignoutData_GameOptions {
	message GameOption {
		optional string key = 1;
		optional string value = 2;
	}

	repeated .CMsgServerSignoutData_GameOptions.GameOption game_options = 1;
}

message CMsgServerToGCMatchSignout {
	message PlayerInfo {
		optional uint32 account_id = 1;
		optional .EDCGLobbyTeam team = 2 [default = k_EDCGLobbyTeam_Team0];
		optional uint32 player_slot = 3;
		repeated uint32 hero_lineup = 4;
		repeated uint32 tower_health = 5;
		optional uint32 ancient_health = 6;
		optional uint32 rating = 7;
		optional bool conceded = 8;
		optional uint32 game_clock = 9;
		repeated uint32 hero_ids = 10;
	}

	enum EEndReason {
		k_EEndReason_TeamWin = 0;
		k_EEndReason_Tie = 1;
		k_EEndReason_AllAbandoned = 2;
		k_EEndReason_NetworkIssues = 3;
		k_EEndReason_MatchLength = 4;
	}

	repeated .CExtraMsgBlock additional_data = 1;
	optional uint32 signout_attempt = 2;
	optional uint64 lobby_id = 3;
	optional uint32 match_duration_s = 4;
	optional uint32 game_turns = 5;
	optional .CMsgServerToGCMatchSignout.EEndReason end_reason = 6 [default = k_EEndReason_TeamWin];
	optional .EDCGLobbyTeam winning_team = 7 [default = k_EDCGLobbyTeam_Team0];
	repeated .CMsgServerToGCMatchSignout.PlayerInfo players = 8;
	optional uint32 cluster_id = 9;
}

message CMsgServerToGCMatchSignoutResponse {
	enum ESignoutResult {
		k_ESignout_Failed_Retry = 1;
		k_ESignout_Failed_NoRetry = 2;
		k_ESignout_Failed_InFlight = 3;
		k_ESignout_Success = 4;
		k_ESignout_Success_AlreadySignedOut = 5;
	}

	optional .CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1 [default = k_ESignout_Failed_Retry];
}

message CMsgServerWelcomeDCG {
}

message CMsgServerToGCValidateCardOwnership {
	optional uint32 account_id = 1;
	optional uint32 league_id = 2;
	repeated uint64 card_item_ids = 3;
}

message CMsgServerToGCValidateCardOwnershipResponse {
	optional bool success = 1;
	optional bool valid_cards = 2;
}

message CMsgServerToGCIdlePing {
	optional uint32 server_version = 1;
}

message CMsgGCToServerRequestPing {
}

message CMsgGCToServerAllocateForMatch {
	optional uint64 match_id = 1;
}

message CMsgGCToServerAllocateForMatchResponse {
	optional bool success = 1;
}

message CMsgServerToGCEnterMatchmaking {
	optional uint32 server_version = 1;
	optional string search_key = 2;
	optional uint32 region_id = 3;
	optional uint32 cluster_id = 4;
	optional uint32 server_public_ip = 5;
	optional uint32 server_private_ip = 6;
	optional uint32 server_port = 7;
	optional uint32 sdr_port = 8;
}

message CMsgGCToServerCancelAllocateForMatch {
	optional uint64 match_id = 1;
}

message CMsgServerToGCUpdateLobbyServerState {
	optional uint64 lobby_id = 1;
	optional .ELobbyServerState server_state = 2 [default = k_eLobbyServerState_Assign];
}

message CMsgServerToGCAbandonMatch {
	message Player {
		optional uint32 account_id = 1;
		optional uint64 additional_data = 2;
	}

	enum EReason {
		eReason_ServerCrash = 1;
		eReason_ClientsFailedToConnect = 2;
	}

	optional fixed64 server_steam_id = 1;
	optional fixed64 lobby_id = 2;
	optional uint32 cluster_id = 3;
	optional .CMsgServerToGCAbandonMatch.EReason reason_code = 4 [default = eReason_ServerCrash];
	optional uint64 additional_data = 5;
	optional uint64 match_id = 6;
	optional uint32 league_id = 7;
	repeated .CMsgServerToGCAbandonMatch.Player players = 8;
	optional fixed32 public_ip_address = 9;
	optional uint32 port = 10;
	optional uint32 server_version = 11;
}

message CMsgServerToGCAbandonMatchResponse {
}

message CMsgServerToGCTestConnection {
}

message CMsgServerToGCTestConnectionResponse {
	optional uint32 state = 1;
	optional uint64 lobby_id = 2;
}

message CMsgGCToServerAddSpectator {
	optional uint64 lobby_id = 1;
	optional uint32 account_id = 2;
	optional uint32 account_to_spectate_id = 3;
}

message CMsgGCToServerAddSpectatorResponse {
	optional bool success = 1;
	optional uint32 account_to_spectate_id = 2;
}

message CMsgGCToServerRunTests {
	optional uint32 expected_version = 1;
}

message CMsgGCToServerRunTestsResponse {
	optional bool running_tests = 1;
}

message CMsgServerToGCTestResults {
	message TestResult {
		optional string test_name = 1;
		optional string test_group = 2;
		optional .CMsgServerToGCTestResults.ETestResult test_result = 3 [default = eResult_Failure];
	}

	enum ETestResult {
		eResult_Failure = 0;
		eResult_Success = 1;
		eResult_Disabled = 2;
	}

	repeated .CMsgServerToGCTestResults.TestResult results = 1;
	optional uint32 server_version = 2;
}

